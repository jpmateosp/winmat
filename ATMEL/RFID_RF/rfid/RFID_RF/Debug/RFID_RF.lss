
RFID_RF.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  000023d4  00002468  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f9  00800198  00800198  00002500  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002500  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002530  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00002570  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000132c2  00000000  00000000  00002d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002c2a  00000000  00000000  00015fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000473e  00000000  00000000  00018bec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001ca8  00000000  00000000  0001d32c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000048c5  00000000  00000000  0001efd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b0f9  00000000  00000000  00023899  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007f8  00000000  00000000  0002e992  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
       4:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       8:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
       c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      10:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      14:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      18:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      1c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      20:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      24:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      28:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      2c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      30:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      34:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      38:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      3c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      40:	0c 94 f9 05 	jmp	0xbf2	; 0xbf2 <__vector_16>
      44:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      48:	0c 94 30 04 	jmp	0x860	; 0x860 <__vector_18>
      4c:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_19>
      50:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      54:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      58:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      5c:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      60:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>
      64:	0c 94 2d 01 	jmp	0x25a	; 0x25a <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	54 69       	ori	r21, 0x94	; 148
      6a:	6d 65       	ori	r22, 0x5D	; 93
      6c:	6f 75       	andi	r22, 0x5F	; 95
      6e:	74 00       	.word	0x0074	; ????

00000070 <_ZZ10read_blockvE3__c_0>:
      70:	4d 49 46 41 52 45 5f 52 65 61 64 28 29 20 66 61     MIFARE_Read() fa
      80:	69 6c 65 64 3a 20 00                                iled: .

00000087 <_ZZ10read_blockvE3__c>:
      87:	50 43 44 5f 41 75 74 68 65 6e 74 69 63 61 74 65     PCD_Authenticate
      97:	28 29 20 66 61 69 6c 65 64 3a 20 00                 () failed: .

000000a3 <digital_pin_to_timer_PGM>:
      a3:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
      b3:	00 00 00 00                                         ....

000000b7 <digital_pin_to_bit_mask_PGM>:
      b7:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      c7:	04 08 10 20                                         ... 

000000cb <digital_pin_to_port_PGM>:
      cb:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      db:	03 03 03 03                                         ....

000000df <port_to_input_PGM>:
      df:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000e9 <port_to_output_PGM>:
      e9:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000f3 <port_to_mode_PGM>:
      f3:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000000fd <_ZL18child_payload_size>:
      fd:	11 12 13 14 15 16                                   ......

00000103 <_ZL10child_pipe>:
     103:	0a 0b 0c 0d 0e 0f                                   ......

00000109 <_ZL17child_pipe_enable>:
     109:	00 01 02 03 04 05                                   ......

0000010f <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_8>:
     10f:	55 6e 6b 6e 6f 77 6e 20 65 72 72 6f 72 00           Unknown error.

0000011d <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_7>:
     11d:	41 20 4d 49 46 41 52 45 20 50 49 43 43 20 72 65     A MIFARE PICC re
     12d:	73 70 6f 6e 64 65 64 20 77 69 74 68 20 4e 41 4b     sponded with NAK
     13d:	2e 00                                               ..

0000013f <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_6>:
     13f:	54 68 65 20 43 52 43 5f 41 20 64 6f 65 73 20 6e     The CRC_A does n
     14f:	6f 74 20 6d 61 74 63 68 2e 00                       ot match..

00000159 <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_5>:
     159:	49 6e 76 61 6c 69 64 20 61 72 67 75 6d 65 6e 74     Invalid argument
     169:	2e 00                                               ..

0000016b <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_4>:
     16b:	49 6e 74 65 72 6e 61 6c 20 65 72 72 6f 72 20 69     Internal error i
     17b:	6e 20 74 68 65 20 63 6f 64 65 2e 20 53 68 6f 75     n the code. Shou
     18b:	6c 64 20 6e 6f 74 20 68 61 70 70 65 6e 2e 00        ld not happen..

0000019a <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_3>:
     19a:	41 20 62 75 66 66 65 72 20 69 73 20 6e 6f 74 20     A buffer is not 
     1aa:	62 69 67 20 65 6e 6f 75 67 68 2e 00                 big enough..

000001b6 <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_2>:
     1b6:	54 69 6d 65 6f 75 74 20 69 6e 20 63 6f 6d 6d 75     Timeout in commu
     1c6:	6e 69 63 61 74 69 6f 6e 2e 00                       nication..

000001d0 <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_1>:
     1d0:	43 6f 6c 6c 69 73 73 69 6f 6e 20 64 65 74 65 63     Collission detec
     1e0:	74 65 64 2e 00                                      ted..

000001e5 <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c_0>:
     1e5:	45 72 72 6f 72 20 69 6e 20 63 6f 6d 6d 75 6e 69     Error in communi
     1f5:	63 61 74 69 6f 6e 2e 00                             cation..

000001fd <_ZZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeEE3__c>:
     1fd:	53 75 63 63 65 73 73 2e 00                          Success..

00000206 <__ctors_start>:
     206:	dd 02       	muls	r29, r29
     208:	92 04       	cpc	r9, r2

0000020a <__ctors_end>:
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	d8 e0       	ldi	r29, 0x08	; 8
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
     216:	11 e0       	ldi	r17, 0x01	; 1
     218:	a0 e0       	ldi	r26, 0x00	; 0
     21a:	b1 e0       	ldi	r27, 0x01	; 1
     21c:	e4 ed       	ldi	r30, 0xD4	; 212
     21e:	f3 e2       	ldi	r31, 0x23	; 35
     220:	02 c0       	rjmp	.+4      	; 0x226 <__do_copy_data+0x10>
     222:	05 90       	lpm	r0, Z+
     224:	0d 92       	st	X+, r0
     226:	a8 39       	cpi	r26, 0x98	; 152
     228:	b1 07       	cpc	r27, r17
     22a:	d9 f7       	brne	.-10     	; 0x222 <__do_copy_data+0xc>

0000022c <__do_clear_bss>:
     22c:	22 e0       	ldi	r18, 0x02	; 2
     22e:	a8 e9       	ldi	r26, 0x98	; 152
     230:	b1 e0       	ldi	r27, 0x01	; 1
     232:	01 c0       	rjmp	.+2      	; 0x236 <.do_clear_bss_start>

00000234 <.do_clear_bss_loop>:
     234:	1d 92       	st	X+, r1

00000236 <.do_clear_bss_start>:
     236:	a1 39       	cpi	r26, 0x91	; 145
     238:	b2 07       	cpc	r27, r18
     23a:	e1 f7       	brne	.-8      	; 0x234 <.do_clear_bss_loop>

0000023c <__do_global_ctors>:
     23c:	11 e0       	ldi	r17, 0x01	; 1
     23e:	c5 e0       	ldi	r28, 0x05	; 5
     240:	d1 e0       	ldi	r29, 0x01	; 1
     242:	04 c0       	rjmp	.+8      	; 0x24c <__do_global_ctors+0x10>
     244:	21 97       	sbiw	r28, 0x01	; 1
     246:	fe 01       	movw	r30, r28
     248:	0e 94 ca 11 	call	0x2394	; 0x2394 <__tablejump2__>
     24c:	c3 30       	cpi	r28, 0x03	; 3
     24e:	d1 07       	cpc	r29, r17
     250:	c9 f7       	brne	.-14     	; 0x244 <__do_global_ctors+0x8>
     252:	0e 94 c0 04 	call	0x980	; 0x980 <main>
     256:	0c 94 e8 11 	jmp	0x23d0	; 0x23d0 <_exit>

0000025a <__bad_interrupt>:
     25a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025e <_Z9RFID_initv>:
}

void RF24_Relpy(){
  myData.ack = 1;
  radio.write( &myData, sizeof(myData) );              // Send the final one back.      
  radio.startListening();                              // Now, resume listening so we catch the next packets.     
     25e:	8c eb       	ldi	r24, 0xBC	; 188
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <_ZN7MFRC5228PCD_InitEv>
     266:	60 e7       	ldi	r22, 0x70	; 112
     268:	8c eb       	ldi	r24, 0xBC	; 188
     26a:	91 e0       	ldi	r25, 0x01	; 1
     26c:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <_ZN7MFRC52218PCD_SetAntennaGainEh>
     270:	e6 eb       	ldi	r30, 0xB6	; 182
     272:	f1 e0       	ldi	r31, 0x01	; 1
     274:	8f ef       	ldi	r24, 0xFF	; 255
     276:	80 83       	st	Z, r24
     278:	81 83       	std	Z+1, r24	; 0x01
     27a:	82 83       	std	Z+2, r24	; 0x02
     27c:	83 83       	std	Z+3, r24	; 0x03
     27e:	84 83       	std	Z+4, r24	; 0x04
     280:	85 83       	std	Z+5, r24	; 0x05
     282:	08 95       	ret

00000284 <_Z5getIDv>:
     284:	ef 92       	push	r14
     286:	ff 92       	push	r15
     288:	0f 93       	push	r16
     28a:	1f 93       	push	r17
     28c:	cf 93       	push	r28
     28e:	8c eb       	ldi	r24, 0xBC	; 188
     290:	91 e0       	ldi	r25, 0x01	; 1
     292:	0e 94 33 10 	call	0x2066	; 0x2066 <_ZN7MFRC52221PICC_IsNewCardPresentEv>
     296:	81 11       	cpse	r24, r1
     298:	02 c0       	rjmp	.+4      	; 0x29e <_Z5getIDv+0x1a>
     29a:	c0 e0       	ldi	r28, 0x00	; 0
     29c:	24 c0       	rjmp	.+72     	; 0x2e6 <_Z5getIDv+0x62>
     29e:	8c eb       	ldi	r24, 0xBC	; 188
     2a0:	91 e0       	ldi	r25, 0x01	; 1
     2a2:	0e 94 3e 0b 	call	0x167c	; 0x167c <_ZN7MFRC52219PICC_ReadCardSerialEv>
     2a6:	c8 2f       	mov	r28, r24
     2a8:	88 23       	and	r24, r24
     2aa:	b9 f3       	breq	.-18     	; 0x29a <_Z5getIDv+0x16>
     2ac:	8f eb       	ldi	r24, 0xBF	; 191
     2ae:	e8 2e       	mov	r14, r24
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	f8 2e       	mov	r15, r24
     2b4:	02 ee       	ldi	r16, 0xE2	; 226
     2b6:	11 e0       	ldi	r17, 0x01	; 1
     2b8:	f7 01       	movw	r30, r14
     2ba:	61 91       	ld	r22, Z+
     2bc:	7f 01       	movw	r14, r30
     2be:	f8 01       	movw	r30, r16
     2c0:	61 93       	st	Z+, r22
     2c2:	8f 01       	movw	r16, r30
     2c4:	70 e0       	ldi	r23, 0x00	; 0
     2c6:	40 e1       	ldi	r20, 0x10	; 16
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	86 ee       	ldi	r24, 0xE6	; 230
     2cc:	91 e0       	ldi	r25, 0x01	; 1
     2ce:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <_ZN5Print5printEii>
     2d2:	f1 e0       	ldi	r31, 0x01	; 1
     2d4:	06 3e       	cpi	r16, 0xE6	; 230
     2d6:	1f 07       	cpc	r17, r31
     2d8:	79 f7       	brne	.-34     	; 0x2b8 <_Z5getIDv+0x34>
     2da:	60 e8       	ldi	r22, 0x80	; 128
     2dc:	71 e0       	ldi	r23, 0x01	; 1
     2de:	86 ee       	ldi	r24, 0xE6	; 230
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
     2e6:	8c 2f       	mov	r24, r28
     2e8:	cf 91       	pop	r28
     2ea:	1f 91       	pop	r17
     2ec:	0f 91       	pop	r16
     2ee:	ff 90       	pop	r15
     2f0:	ef 90       	pop	r14
     2f2:	08 95       	ret

000002f4 <_Z10read_blockv>:
     2f4:	0f 93       	push	r16
     2f6:	1f 93       	push	r17
     2f8:	cf 93       	push	r28
     2fa:	df 93       	push	r29
     2fc:	1f 92       	push	r1
     2fe:	cd b7       	in	r28, 0x3d	; 61
     300:	de b7       	in	r29, 0x3e	; 62
     302:	82 e1       	ldi	r24, 0x12	; 18
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	0e eb       	ldi	r16, 0xBE	; 190
     308:	11 e0       	ldi	r17, 0x01	; 1
     30a:	26 eb       	ldi	r18, 0xB6	; 182
     30c:	31 e0       	ldi	r19, 0x01	; 1
     30e:	47 e0       	ldi	r20, 0x07	; 7
     310:	60 e6       	ldi	r22, 0x60	; 96
     312:	8c eb       	ldi	r24, 0xBC	; 188
     314:	91 e0       	ldi	r25, 0x01	; 1
     316:	0e 94 a8 10 	call	0x2150	; 0x2150 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>
     31a:	18 2f       	mov	r17, r24
     31c:	88 23       	and	r24, r24
     31e:	19 f0       	breq	.+6      	; 0x326 <_Z10read_blockv+0x32>
     320:	67 e8       	ldi	r22, 0x87	; 135
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	0f c0       	rjmp	.+30     	; 0x344 <_Z10read_blockv+0x50>
     326:	9e 01       	movw	r18, r28
     328:	2f 5f       	subi	r18, 0xFF	; 255
     32a:	3f 4f       	sbci	r19, 0xFF	; 255
     32c:	40 ed       	ldi	r20, 0xD0	; 208
     32e:	51 e0       	ldi	r21, 0x01	; 1
     330:	64 e0       	ldi	r22, 0x04	; 4
     332:	8c eb       	ldi	r24, 0xBC	; 188
     334:	91 e0       	ldi	r25, 0x01	; 1
     336:	0e 94 07 11 	call	0x220e	; 0x220e <_ZN7MFRC52211MIFARE_ReadEhPhS0_>
     33a:	18 2f       	mov	r17, r24
     33c:	88 23       	and	r24, r24
     33e:	81 f0       	breq	.+32     	; 0x360 <_Z10read_blockv+0x6c>
     340:	60 e7       	ldi	r22, 0x70	; 112
     342:	70 e0       	ldi	r23, 0x00	; 0
     344:	86 ee       	ldi	r24, 0xE6	; 230
     346:	91 e0       	ldi	r25, 0x01	; 1
     348:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN5Print5printEPK19__FlashStringHelper>
     34c:	81 2f       	mov	r24, r17
     34e:	0e 94 40 11 	call	0x2280	; 0x2280 <_ZN7MFRC52217GetStatusCodeNameENS_10StatusCodeE>
     352:	bc 01       	movw	r22, r24
     354:	86 ee       	ldi	r24, 0xE6	; 230
     356:	91 e0       	ldi	r25, 0x01	; 1
     358:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN5Print7printlnEPK19__FlashStringHelper>
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	07 c0       	rjmp	.+14     	; 0x36e <_Z10read_blockv+0x7a>
     360:	62 e1       	ldi	r22, 0x12	; 18
     362:	71 e0       	ldi	r23, 0x01	; 1
     364:	86 ee       	ldi	r24, 0xE6	; 230
     366:	91 e0       	ldi	r25, 0x01	; 1
     368:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	0f 90       	pop	r0
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	08 95       	ret

0000037a <_Z10check_passPh>:
     37a:	ec e5       	ldi	r30, 0x5C	; 92
     37c:	f1 e0       	ldi	r31, 0x01	; 1
     37e:	31 91       	ld	r19, Z+
     380:	dc 01       	movw	r26, r24
     382:	2d 91       	ld	r18, X+
     384:	cd 01       	movw	r24, r26
     386:	32 13       	cpse	r19, r18
     388:	06 c0       	rjmp	.+12     	; 0x396 <_Z10check_passPh+0x1c>
     38a:	b1 e0       	ldi	r27, 0x01	; 1
     38c:	e8 36       	cpi	r30, 0x68	; 104
     38e:	fb 07       	cpc	r31, r27
     390:	b1 f7       	brne	.-20     	; 0x37e <_Z10check_passPh+0x4>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	08 95       	ret
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	08 95       	ret

0000039a <_Z10RFID_resetv>:
     39a:	8c eb       	ldi	r24, 0xBC	; 188
     39c:	91 e0       	ldi	r25, 0x01	; 1
     39e:	0e 94 65 10 	call	0x20ca	; 0x20ca <_ZN7MFRC52210PICC_HaltAEv>
     3a2:	8c eb       	ldi	r24, 0xBC	; 188
     3a4:	91 e0       	ldi	r25, 0x01	; 1
     3a6:	0c 94 03 11 	jmp	0x2206	; 0x2206 <_ZN7MFRC52215PCD_StopCrypto1Ev>

000003aa <_Z9RF24_initv>:
     3aa:	8e e9       	ldi	r24, 0x9E	; 158
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	0e 94 c8 0a 	call	0x1590	; 0x1590 <_ZN4RF245beginEv>
     3b2:	63 e0       	ldi	r22, 0x03	; 3
     3b4:	8e e9       	ldi	r24, 0x9E	; 158
     3b6:	91 e0       	ldi	r25, 0x01	; 1
     3b8:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <_ZN4RF2410setPALevelEh>
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	71 e0       	ldi	r23, 0x01	; 1
     3c0:	8e e9       	ldi	r24, 0x9E	; 158
     3c2:	91 e0       	ldi	r25, 0x01	; 1
     3c4:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN4RF2415openWritingPipeEPKh>
     3c8:	46 e0       	ldi	r20, 0x06	; 6
     3ca:	51 e0       	ldi	r21, 0x01	; 1
     3cc:	61 e0       	ldi	r22, 0x01	; 1
     3ce:	8e e9       	ldi	r24, 0x9E	; 158
     3d0:	91 e0       	ldi	r25, 0x01	; 1
     3d2:	0e 94 c3 09 	call	0x1386	; 0x1386 <_ZN4RF2415openReadingPipeEhPKh>
     3d6:	8e e9       	ldi	r24, 0x9E	; 158
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	0c 94 34 0a 	jmp	0x1468	; 0x1468 <_ZN4RF2414startListeningEv>

000003de <setup>:
     3de:	61 e0       	ldi	r22, 0x01	; 1
     3e0:	82 e0       	ldi	r24, 0x02	; 2
     3e2:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     3e6:	61 e0       	ldi	r22, 0x01	; 1
     3e8:	8d e0       	ldi	r24, 0x0D	; 13
     3ea:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	8c e0       	ldi	r24, 0x0C	; 12
     3f2:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     3f6:	61 e0       	ldi	r22, 0x01	; 1
     3f8:	8b e0       	ldi	r24, 0x0B	; 11
     3fa:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     3fe:	61 e0       	ldi	r22, 0x01	; 1
     400:	8a e0       	ldi	r24, 0x0A	; 10
     402:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	89 e0       	ldi	r24, 0x09	; 9
     40a:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	87 e0       	ldi	r24, 0x07	; 7
     412:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	88 e0       	ldi	r24, 0x08	; 8
     41a:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
     41e:	61 e0       	ldi	r22, 0x01	; 1
     420:	82 e0       	ldi	r24, 0x02	; 2
     422:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
     426:	26 e0       	ldi	r18, 0x06	; 6
     428:	40 e8       	ldi	r20, 0x80	; 128
     42a:	55 e2       	ldi	r21, 0x25	; 37
     42c:	60 e0       	ldi	r22, 0x00	; 0
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	86 ee       	ldi	r24, 0xE6	; 230
     432:	91 e0       	ldi	r25, 0x01	; 1
     434:	0e 94 cb 03 	call	0x796	; 0x796 <_ZN14HardwareSerial5beginEmh>
     438:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN8SPIClass5beginEv>
     43c:	0e 94 2f 01 	call	0x25e	; 0x25e <_Z9RFID_initv>
     440:	0e 94 d5 01 	call	0x3aa	; 0x3aa <_Z9RF24_initv>
     444:	6d e1       	ldi	r22, 0x1D	; 29
     446:	71 e0       	ldi	r23, 0x01	; 1
     448:	86 ee       	ldi	r24, 0xE6	; 230
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>

00000450 <_Z10RF_Requestv>:
     450:	cf 92       	push	r12
     452:	df 92       	push	r13
     454:	ef 92       	push	r14
     456:	ff 92       	push	r15
     458:	44 e0       	ldi	r20, 0x04	; 4
     45a:	50 e0       	ldi	r21, 0x00	; 0
     45c:	62 ee       	ldi	r22, 0xE2	; 226
     45e:	71 e0       	ldi	r23, 0x01	; 1
     460:	88 e9       	ldi	r24, 0x98	; 152
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <strncpy>
     468:	10 92 9d 01 	sts	0x019D, r1	; 0x80019d <__data_end+0x5>
     46c:	8e e9       	ldi	r24, 0x9E	; 158
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <_ZN4RF2413stopListeningEv>
     474:	46 e0       	ldi	r20, 0x06	; 6
     476:	68 e9       	ldi	r22, 0x98	; 152
     478:	71 e0       	ldi	r23, 0x01	; 1
     47a:	8e e9       	ldi	r24, 0x9E	; 158
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	0e 94 78 09 	call	0x12f0	; 0x12f0 <_ZN4RF245writeEPKvh>
     482:	8e e9       	ldi	r24, 0x9E	; 158
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 34 0a 	call	0x1468	; 0x1468 <_ZN4RF2414startListeningEv>
     48a:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
     48e:	6b 01       	movw	r12, r22
     490:	7c 01       	movw	r14, r24
     492:	8e e9       	ldi	r24, 0x9E	; 158
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	0e 94 99 09 	call	0x1332	; 0x1332 <_ZN4RF249availableEv>
     49a:	81 11       	cpse	r24, r1
     49c:	16 c0       	rjmp	.+44     	; 0x4ca <_Z10RF_Requestv+0x7a>
     49e:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
     4a2:	dc 01       	movw	r26, r24
     4a4:	cb 01       	movw	r24, r22
     4a6:	8c 19       	sub	r24, r12
     4a8:	9d 09       	sbc	r25, r13
     4aa:	ae 09       	sbc	r26, r14
     4ac:	bf 09       	sbc	r27, r15
     4ae:	81 34       	cpi	r24, 0x41	; 65
     4b0:	9d 40       	sbci	r25, 0x0D	; 13
     4b2:	a3 40       	sbci	r26, 0x03	; 3
     4b4:	b1 05       	cpc	r27, r1
     4b6:	68 f3       	brcs	.-38     	; 0x492 <_Z10RF_Requestv+0x42>
     4b8:	68 e6       	ldi	r22, 0x68	; 104
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	86 ee       	ldi	r24, 0xE6	; 230
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	0e 94 3d 05 	call	0xa7a	; 0xa7a <_ZN5Print7printlnEPK19__FlashStringHelper>
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	10 c0       	rjmp	.+32     	; 0x4ea <_Z10RF_Requestv+0x9a>
     4ca:	46 e0       	ldi	r20, 0x06	; 6
     4cc:	68 e9       	ldi	r22, 0x98	; 152
     4ce:	71 e0       	ldi	r23, 0x01	; 1
     4d0:	8e e9       	ldi	r24, 0x9E	; 158
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	0e 94 9d 09 	call	0x133a	; 0x133a <_ZN4RF244readEPvh>
     4d8:	80 91 9d 01 	lds	r24, 0x019D	; 0x80019d <__data_end+0x5>
     4dc:	81 11       	cpse	r24, r1
     4de:	03 c0       	rjmp	.+6      	; 0x4e6 <_Z10RF_Requestv+0x96>
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	02 c0       	rjmp	.+4      	; 0x4ea <_Z10RF_Requestv+0x9a>
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	90 e0       	ldi	r25, 0x00	; 0
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	08 95       	ret

000004f4 <_Z9Open_doorv>:
}

void Open_door(){
  digitalWrite(DOOR,LOW);
     4f4:	60 e0       	ldi	r22, 0x00	; 0
     4f6:	82 e0       	ldi	r24, 0x02	; 2
     4f8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
  Serial.println("Access");
     4fc:	6c e3       	ldi	r22, 0x3C	; 60
     4fe:	71 e0       	ldi	r23, 0x01	; 1
     500:	86 ee       	ldi	r24, 0xE6	; 230
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
  delay(3000);
     508:	68 eb       	ldi	r22, 0xB8	; 184
     50a:	7b e0       	ldi	r23, 0x0B	; 11
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay>
  digitalWrite(DOOR,HIGH);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <digitalWrite>

0000051c <loop>:
  RF24_init();
  Serial.println("Ready");
}

void loop() {
  if(getID()){
     51c:	0e 94 42 01 	call	0x284	; 0x284 <_Z5getIDv>
     520:	88 23       	and	r24, r24
     522:	09 f4       	brne	.+2      	; 0x526 <loop+0xa>
     524:	48 c0       	rjmp	.+144    	; 0x5b6 <loop+0x9a>
    Serial.println("Detection");
     526:	67 e2       	ldi	r22, 0x27	; 39
     528:	71 e0       	ldi	r23, 0x01	; 1
     52a:	86 ee       	ldi	r24, 0xE6	; 230
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
    if(read_block()){
     532:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <_Z10read_blockv>
     536:	88 23       	and	r24, r24
     538:	61 f1       	breq	.+88     	; 0x592 <loop+0x76>
       if(check_pass(buffer)){
     53a:	80 ed       	ldi	r24, 0xD0	; 208
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 bd 01 	call	0x37a	; 0x37a <_Z10check_passPh>
     542:	88 23       	and	r24, r24
     544:	19 f1       	breq	.+70     	; 0x58c <loop+0x70>
          Serial.println("Attempt");
     546:	61 e3       	ldi	r22, 0x31	; 49
     548:	71 e0       	ldi	r23, 0x01	; 1
     54a:	86 ee       	ldi	r24, 0xE6	; 230
     54c:	91 e0       	ldi	r25, 0x01	; 1
     54e:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
      digitalWrite(10,HIGH);
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	8a e0       	ldi	r24, 0x0A	; 10
     556:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
      digitalWrite(7,LOW);
     55a:	60 e0       	ldi	r22, 0x00	; 0
     55c:	87 e0       	ldi	r24, 0x07	; 7
     55e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
          if(RF_Request()== 0){
     562:	0e 94 28 02 	call	0x450	; 0x450 <_Z10RF_Requestv>
     566:	89 2b       	or	r24, r25
     568:	71 f4       	brne	.+28     	; 0x586 <loop+0x6a>
              if(myData.access){
     56a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <__data_end+0x4>
     56e:	88 23       	and	r24, r24
     570:	19 f0       	breq	.+6      	; 0x578 <loop+0x5c>
                  Open_door();
     572:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <_Z9Open_doorv>
     576:	13 c0       	rjmp	.+38     	; 0x59e <loop+0x82>
              }else{
                  digitalWrite(DOOR,HIGH);
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	82 e0       	ldi	r24, 0x02	; 2
     57c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
                  Serial.println("No Access");
     580:	69 e3       	ldi	r22, 0x39	; 57
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	08 c0       	rjmp	.+16     	; 0x596 <loop+0x7a>
              }
          }else{
            Serial.println("Error");
     586:	63 e4       	ldi	r22, 0x43	; 67
     588:	71 e0       	ldi	r23, 0x01	; 1
     58a:	05 c0       	rjmp	.+10     	; 0x596 <loop+0x7a>
          }
       }else{
          Serial.println("No match");
     58c:	69 e4       	ldi	r22, 0x49	; 73
     58e:	71 e0       	ldi	r23, 0x01	; 1
     590:	02 c0       	rjmp	.+4      	; 0x596 <loop+0x7a>
       }
    }else{
        Serial.println("Try again");
     592:	62 e5       	ldi	r22, 0x52	; 82
     594:	71 e0       	ldi	r23, 0x01	; 1
     596:	86 ee       	ldi	r24, 0xE6	; 230
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <_ZN5Print7printlnEPKc>
    }
    digitalWrite(DOOR,HIGH);
     59e:	61 e0       	ldi	r22, 0x01	; 1
     5a0:	82 e0       	ldi	r24, 0x02	; 2
     5a2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
  digitalWrite(10,LOW);
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	8a e0       	ldi	r24, 0x0A	; 10
     5aa:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    digitalWrite(7,HIGH);
     5ae:	61 e0       	ldi	r22, 0x01	; 1
     5b0:	87 e0       	ldi	r24, 0x07	; 7
     5b2:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
      }
    }else{
      Serial.println("Message no good");
    }*/
  }else{
    RFID_reset();
     5b6:	0c 94 cd 01 	jmp	0x39a	; 0x39a <_Z10RFID_resetv>

000005ba <_GLOBAL__sub_I_storedCard>:
	// Functions for setting up the Arduino
	/////////////////////////////////////////////////////////////////////////////////////
	MFRC522(const byte chipSelectPin, const byte resetPowerDownPin,
			SPIClass *spiClass = &SPI, const SPISettings spiSettings = SPISettings(SPI_CLOCK_DIV2, MSBFIRST, SPI_MODE0))
			: _chipSelectPin(chipSelectPin), _resetPowerDownPin(resetPowerDownPin),
			  _spiClass(spiClass), _spiSettings(spiSettings) {};
     5ba:	ec eb       	ldi	r30, 0xBC	; 188
     5bc:	f1 e0       	ldi	r31, 0x01	; 1
     5be:	81 e9       	ldi	r24, 0x91	; 145
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	91 83       	std	Z+1, r25	; 0x01
     5c4:	80 83       	st	Z, r24
     5c6:	8a e0       	ldi	r24, 0x0A	; 10
     5c8:	86 87       	std	Z+14, r24	; 0x0e
     5ca:	89 e0       	ldi	r24, 0x09	; 9
     5cc:	87 87       	std	Z+15, r24	; 0x0f
     5ce:	80 e9       	ldi	r24, 0x90	; 144
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	91 8b       	std	Z+17, r25	; 0x11
     5d4:	80 8b       	std	Z+16, r24	; 0x10
     5d6:	83 e5       	ldi	r24, 0x53	; 83
     5d8:	82 8b       	std	Z+18, r24	; 0x12
     5da:	13 8a       	std	Z+19, r1	; 0x13

////RF24 Initialization///

byte addresses[][6] = {"WinD","WinR","Mas"};
bool radioNumber = 0;
RF24 radio(7,8);
     5dc:	48 e0       	ldi	r20, 0x08	; 8
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	67 e0       	ldi	r22, 0x07	; 7
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	8e e9       	ldi	r24, 0x9E	; 158
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	0c 94 d3 08 	jmp	0x11a6	; 0x11a6 <_ZN4RF24C1Ejj>

000005ec <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
     5ec:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
     5ee:	91 8d       	ldd	r25, Z+25	; 0x19
     5f0:	22 8d       	ldd	r18, Z+26	; 0x1a
     5f2:	89 2f       	mov	r24, r25
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	80 5c       	subi	r24, 0xC0	; 192
     5f8:	9f 4f       	sbci	r25, 0xFF	; 255
     5fa:	82 1b       	sub	r24, r18
     5fc:	91 09       	sbc	r25, r1
}
     5fe:	8f 73       	andi	r24, 0x3F	; 63
     600:	99 27       	eor	r25, r25
     602:	08 95       	ret

00000604 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
     604:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
     606:	91 8d       	ldd	r25, Z+25	; 0x19
     608:	82 8d       	ldd	r24, Z+26	; 0x1a
     60a:	98 17       	cp	r25, r24
     60c:	31 f0       	breq	.+12     	; 0x61a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
     60e:	82 8d       	ldd	r24, Z+26	; 0x1a
     610:	e8 0f       	add	r30, r24
     612:	f1 1d       	adc	r31, r1
     614:	85 8d       	ldd	r24, Z+29	; 0x1d
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     61a:	8f ef       	ldi	r24, 0xFF	; 255
     61c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
     61e:	08 95       	ret

00000620 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
     620:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
     622:	91 8d       	ldd	r25, Z+25	; 0x19
     624:	82 8d       	ldd	r24, Z+26	; 0x1a
     626:	98 17       	cp	r25, r24
     628:	61 f0       	breq	.+24     	; 0x642 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
     62a:	82 8d       	ldd	r24, Z+26	; 0x1a
     62c:	df 01       	movw	r26, r30
     62e:	a8 0f       	add	r26, r24
     630:	b1 1d       	adc	r27, r1
     632:	5d 96       	adiw	r26, 0x1d	; 29
     634:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
     636:	92 8d       	ldd	r25, Z+26	; 0x1a
     638:	9f 5f       	subi	r25, 0xFF	; 255
     63a:	9f 73       	andi	r25, 0x3F	; 63
     63c:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
     642:	8f ef       	ldi	r24, 0xFF	; 255
     644:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
     646:	08 95       	ret

00000648 <_ZN14HardwareSerial17availableForWriteEv>:
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
     648:	fc 01       	movw	r30, r24
     64a:	53 8d       	ldd	r21, Z+27	; 0x1b
  tx_buffer_index_t tail = _tx_buffer_tail;
     64c:	44 8d       	ldd	r20, Z+28	; 0x1c
     64e:	25 2f       	mov	r18, r21
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	84 2f       	mov	r24, r20
     654:	90 e0       	ldi	r25, 0x00	; 0
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
     656:	82 1b       	sub	r24, r18
     658:	93 0b       	sbc	r25, r19
     65a:	54 17       	cp	r21, r20
     65c:	10 f0       	brcs	.+4      	; 0x662 <_ZN14HardwareSerial17availableForWriteEv+0x1a>
     65e:	cf 96       	adiw	r24, 0x3f	; 63
     660:	08 95       	ret
  return tail - head - 1;
     662:	01 97       	sbiw	r24, 0x01	; 1
}
     664:	08 95       	ret

00000666 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
     666:	88 e8       	ldi	r24, 0x88	; 136
     668:	94 e0       	ldi	r25, 0x04	; 4
     66a:	89 2b       	or	r24, r25
     66c:	49 f0       	breq	.+18     	; 0x680 <_Z14serialEventRunv+0x1a>
     66e:	80 e0       	ldi	r24, 0x00	; 0
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	89 2b       	or	r24, r25
     674:	29 f0       	breq	.+10     	; 0x680 <_Z14serialEventRunv+0x1a>
     676:	0e 94 88 04 	call	0x910	; 0x910 <_Z17Serial0_availablev>
     67a:	81 11       	cpse	r24, r1
     67c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
     680:	08 95       	ret

00000682 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
     682:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
     684:	84 8d       	ldd	r24, Z+28	; 0x1c
     686:	df 01       	movw	r26, r30
     688:	a8 0f       	add	r26, r24
     68a:	b1 1d       	adc	r27, r1
     68c:	a3 5a       	subi	r26, 0xA3	; 163
     68e:	bf 4f       	sbci	r27, 0xFF	; 255
     690:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
     692:	84 8d       	ldd	r24, Z+28	; 0x1c
     694:	90 e0       	ldi	r25, 0x00	; 0
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	8f 73       	andi	r24, 0x3F	; 63
     69a:	99 27       	eor	r25, r25
     69c:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
     69e:	a6 89       	ldd	r26, Z+22	; 0x16
     6a0:	b7 89       	ldd	r27, Z+23	; 0x17
     6a2:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
     6a4:	a0 89       	ldd	r26, Z+16	; 0x10
     6a6:	b1 89       	ldd	r27, Z+17	; 0x11
     6a8:	8c 91       	ld	r24, X
     6aa:	80 64       	ori	r24, 0x40	; 64
     6ac:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
     6ae:	93 8d       	ldd	r25, Z+27	; 0x1b
     6b0:	84 8d       	ldd	r24, Z+28	; 0x1c
     6b2:	98 13       	cpse	r25, r24
     6b4:	06 c0       	rjmp	.+12     	; 0x6c2 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
     6b6:	02 88       	ldd	r0, Z+18	; 0x12
     6b8:	f3 89       	ldd	r31, Z+19	; 0x13
     6ba:	e0 2d       	mov	r30, r0
     6bc:	80 81       	ld	r24, Z
     6be:	8f 7d       	andi	r24, 0xDF	; 223
     6c0:	80 83       	st	Z, r24
     6c2:	08 95       	ret

000006c4 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
     6c4:	ef 92       	push	r14
     6c6:	ff 92       	push	r15
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	ec 01       	movw	r28, r24
  _written = true;
     6d2:	81 e0       	ldi	r24, 0x01	; 1
     6d4:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
     6d6:	9b 8d       	ldd	r25, Y+27	; 0x1b
     6d8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6da:	98 13       	cpse	r25, r24
     6dc:	05 c0       	rjmp	.+10     	; 0x6e8 <_ZN14HardwareSerial5writeEh+0x24>
     6de:	e8 89       	ldd	r30, Y+16	; 0x10
     6e0:	f9 89       	ldd	r31, Y+17	; 0x11
     6e2:	80 81       	ld	r24, Z
     6e4:	85 fd       	sbrc	r24, 5
     6e6:	24 c0       	rjmp	.+72     	; 0x730 <_ZN14HardwareSerial5writeEh+0x6c>
     6e8:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
     6ea:	0b 8d       	ldd	r16, Y+27	; 0x1b
     6ec:	10 e0       	ldi	r17, 0x00	; 0
     6ee:	0f 5f       	subi	r16, 0xFF	; 255
     6f0:	1f 4f       	sbci	r17, 0xFF	; 255
     6f2:	0f 73       	andi	r16, 0x3F	; 63
     6f4:	11 27       	eor	r17, r17
     6f6:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
     6f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     6fa:	e8 12       	cpse	r14, r24
     6fc:	0c c0       	rjmp	.+24     	; 0x716 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
     6fe:	0f b6       	in	r0, 0x3f	; 63
     700:	07 fc       	sbrc	r0, 7
     702:	fa cf       	rjmp	.-12     	; 0x6f8 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
     704:	e8 89       	ldd	r30, Y+16	; 0x10
     706:	f9 89       	ldd	r31, Y+17	; 0x11
     708:	80 81       	ld	r24, Z
     70a:	85 ff       	sbrs	r24, 5
     70c:	f5 cf       	rjmp	.-22     	; 0x6f8 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 41 03 	call	0x682	; 0x682 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     714:	f1 cf       	rjmp	.-30     	; 0x6f8 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
     716:	8b 8d       	ldd	r24, Y+27	; 0x1b
     718:	fe 01       	movw	r30, r28
     71a:	e8 0f       	add	r30, r24
     71c:	f1 1d       	adc	r31, r1
     71e:	e3 5a       	subi	r30, 0xA3	; 163
     720:	ff 4f       	sbci	r31, 0xFF	; 255
     722:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
     724:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
     726:	ea 89       	ldd	r30, Y+18	; 0x12
     728:	fb 89       	ldd	r31, Y+19	; 0x13
     72a:	80 81       	ld	r24, Z
     72c:	80 62       	ori	r24, 0x20	; 32
     72e:	07 c0       	rjmp	.+14     	; 0x73e <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
     730:	ee 89       	ldd	r30, Y+22	; 0x16
     732:	ff 89       	ldd	r31, Y+23	; 0x17
     734:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
     736:	e8 89       	ldd	r30, Y+16	; 0x10
     738:	f9 89       	ldd	r31, Y+17	; 0x11
     73a:	80 81       	ld	r24, Z
     73c:	80 64       	ori	r24, 0x40	; 64
     73e:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
     740:	81 e0       	ldi	r24, 0x01	; 1
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	df 91       	pop	r29
     746:	cf 91       	pop	r28
     748:	1f 91       	pop	r17
     74a:	0f 91       	pop	r16
     74c:	ff 90       	pop	r15
     74e:	ef 90       	pop	r14
     750:	08 95       	ret

00000752 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
     752:	cf 93       	push	r28
     754:	df 93       	push	r29
     756:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
     758:	88 8d       	ldd	r24, Y+24	; 0x18
     75a:	88 23       	and	r24, r24
     75c:	c9 f0       	breq	.+50     	; 0x790 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
     75e:	ea 89       	ldd	r30, Y+18	; 0x12
     760:	fb 89       	ldd	r31, Y+19	; 0x13
     762:	80 81       	ld	r24, Z
     764:	85 fd       	sbrc	r24, 5
     766:	05 c0       	rjmp	.+10     	; 0x772 <_ZN14HardwareSerial5flushEv+0x20>
     768:	a8 89       	ldd	r26, Y+16	; 0x10
     76a:	b9 89       	ldd	r27, Y+17	; 0x11
     76c:	8c 91       	ld	r24, X
     76e:	86 fd       	sbrc	r24, 6
     770:	0f c0       	rjmp	.+30     	; 0x790 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	07 fc       	sbrc	r0, 7
     776:	f5 cf       	rjmp	.-22     	; 0x762 <_ZN14HardwareSerial5flushEv+0x10>
     778:	80 81       	ld	r24, Z
     77a:	85 ff       	sbrs	r24, 5
     77c:	f2 cf       	rjmp	.-28     	; 0x762 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
     77e:	a8 89       	ldd	r26, Y+16	; 0x10
     780:	b9 89       	ldd	r27, Y+17	; 0x11
     782:	8c 91       	ld	r24, X
     784:	85 ff       	sbrs	r24, 5
     786:	ed cf       	rjmp	.-38     	; 0x762 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
     788:	ce 01       	movw	r24, r28
     78a:	0e 94 41 03 	call	0x682	; 0x682 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
     78e:	e7 cf       	rjmp	.-50     	; 0x75e <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
     796:	cf 92       	push	r12
     798:	df 92       	push	r13
     79a:	ef 92       	push	r14
     79c:	ff 92       	push	r15
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
     7a6:	6a 01       	movw	r12, r20
     7a8:	7b 01       	movw	r14, r22
     7aa:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
     7ac:	e8 89       	ldd	r30, Y+16	; 0x10
     7ae:	f9 89       	ldd	r31, Y+17	; 0x11
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7b4:	41 15       	cp	r20, r1
     7b6:	51 4e       	sbci	r21, 0xE1	; 225
     7b8:	61 05       	cpc	r22, r1
     7ba:	71 05       	cpc	r23, r1
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	79 e0       	ldi	r23, 0x09	; 9
     7c2:	8d e3       	ldi	r24, 0x3D	; 61
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	a7 01       	movw	r20, r14
     7c8:	96 01       	movw	r18, r12
     7ca:	0e 94 a8 11 	call	0x2350	; 0x2350 <__udivmodsi4>
     7ce:	da 01       	movw	r26, r20
     7d0:	c9 01       	movw	r24, r18
     7d2:	01 97       	sbiw	r24, 0x01	; 1
     7d4:	a1 09       	sbc	r26, r1
     7d6:	b1 09       	sbc	r27, r1
     7d8:	b6 95       	lsr	r27
     7da:	a7 95       	ror	r26
     7dc:	97 95       	ror	r25
     7de:	87 95       	ror	r24
     7e0:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
     7e2:	21 15       	cp	r18, r1
     7e4:	80 e1       	ldi	r24, 0x10	; 16
     7e6:	38 07       	cpc	r19, r24
     7e8:	a8 f0       	brcs	.+42     	; 0x814 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
     7ea:	e8 89       	ldd	r30, Y+16	; 0x10
     7ec:	f9 89       	ldd	r31, Y+17	; 0x11
     7ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     7f0:	60 e8       	ldi	r22, 0x80	; 128
     7f2:	74 e8       	ldi	r23, 0x84	; 132
     7f4:	8e e1       	ldi	r24, 0x1E	; 30
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	a7 01       	movw	r20, r14
     7fa:	96 01       	movw	r18, r12
     7fc:	0e 94 a8 11 	call	0x2350	; 0x2350 <__udivmodsi4>
     800:	da 01       	movw	r26, r20
     802:	c9 01       	movw	r24, r18
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	a1 09       	sbc	r26, r1
     808:	b1 09       	sbc	r27, r1
     80a:	b6 95       	lsr	r27
     80c:	a7 95       	ror	r26
     80e:	97 95       	ror	r25
     810:	87 95       	ror	r24
     812:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     814:	ec 85       	ldd	r30, Y+12	; 0x0c
     816:	fd 85       	ldd	r31, Y+13	; 0x0d
     818:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     81a:	ee 85       	ldd	r30, Y+14	; 0x0e
     81c:	ff 85       	ldd	r31, Y+15	; 0x0f
     81e:	20 83       	st	Z, r18

  _written = false;
     820:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
     822:	ec 89       	ldd	r30, Y+20	; 0x14
     824:	fd 89       	ldd	r31, Y+21	; 0x15
     826:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
     828:	ea 89       	ldd	r30, Y+18	; 0x12
     82a:	fb 89       	ldd	r31, Y+19	; 0x13
     82c:	80 81       	ld	r24, Z
     82e:	80 61       	ori	r24, 0x10	; 16
     830:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
     832:	ea 89       	ldd	r30, Y+18	; 0x12
     834:	fb 89       	ldd	r31, Y+19	; 0x13
     836:	80 81       	ld	r24, Z
     838:	88 60       	ori	r24, 0x08	; 8
     83a:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
     83c:	ea 89       	ldd	r30, Y+18	; 0x12
     83e:	fb 89       	ldd	r31, Y+19	; 0x13
     840:	80 81       	ld	r24, Z
     842:	80 68       	ori	r24, 0x80	; 128
     844:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
     846:	ea 89       	ldd	r30, Y+18	; 0x12
     848:	fb 89       	ldd	r31, Y+19	; 0x13
     84a:	80 81       	ld	r24, Z
     84c:	8f 7d       	andi	r24, 0xDF	; 223
     84e:	80 83       	st	Z, r24
}
     850:	df 91       	pop	r29
     852:	cf 91       	pop	r28
     854:	1f 91       	pop	r17
     856:	ff 90       	pop	r15
     858:	ef 90       	pop	r14
     85a:	df 90       	pop	r13
     85c:	cf 90       	pop	r12
     85e:	08 95       	ret

00000860 <__vector_18>:
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect) // ATmega8
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
     860:	1f 92       	push	r1
     862:	0f 92       	push	r0
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	0f 92       	push	r0
     868:	11 24       	eor	r1, r1
     86a:	2f 93       	push	r18
     86c:	8f 93       	push	r24
     86e:	9f 93       	push	r25
     870:	ef 93       	push	r30
     872:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
     874:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <Serial+0x10>
     878:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <Serial+0x11>
     87c:	80 81       	ld	r24, Z
     87e:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <Serial+0x16>
     882:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <Serial+0x17>
     886:	82 fd       	sbrc	r24, 2
     888:	12 c0       	rjmp	.+36     	; 0x8ae <__vector_18+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
     88a:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
     88c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <Serial+0x19>
     890:	8f 5f       	subi	r24, 0xFF	; 255
     892:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
     894:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <Serial+0x1a>
     898:	82 17       	cp	r24, r18
     89a:	51 f0       	breq	.+20     	; 0x8b0 <__vector_18+0x50>
      _rx_buffer[_rx_buffer_head] = c;
     89c:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <Serial+0x19>
     8a0:	f0 e0       	ldi	r31, 0x00	; 0
     8a2:	ea 51       	subi	r30, 0x1A	; 26
     8a4:	fe 4f       	sbci	r31, 0xFE	; 254
     8a6:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
     8a8:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <Serial+0x19>
     8ac:	01 c0       	rjmp	.+2      	; 0x8b0 <__vector_18+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
     8ae:	80 81       	ld	r24, Z
    Serial._rx_complete_irq();
  }
     8b0:	ff 91       	pop	r31
     8b2:	ef 91       	pop	r30
     8b4:	9f 91       	pop	r25
     8b6:	8f 91       	pop	r24
     8b8:	2f 91       	pop	r18
     8ba:	0f 90       	pop	r0
     8bc:	0f be       	out	0x3f, r0	; 63
     8be:	0f 90       	pop	r0
     8c0:	1f 90       	pop	r1
     8c2:	18 95       	reti

000008c4 <__vector_19>:
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
     8c4:	1f 92       	push	r1
     8c6:	0f 92       	push	r0
     8c8:	0f b6       	in	r0, 0x3f	; 63
     8ca:	0f 92       	push	r0
     8cc:	11 24       	eor	r1, r1
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
  Serial._tx_udr_empty_irq();
     8e6:	86 ee       	ldi	r24, 0xE6	; 230
     8e8:	91 e0       	ldi	r25, 0x01	; 1
     8ea:	0e 94 41 03 	call	0x682	; 0x682 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
     8ee:	ff 91       	pop	r31
     8f0:	ef 91       	pop	r30
     8f2:	bf 91       	pop	r27
     8f4:	af 91       	pop	r26
     8f6:	9f 91       	pop	r25
     8f8:	8f 91       	pop	r24
     8fa:	7f 91       	pop	r23
     8fc:	6f 91       	pop	r22
     8fe:	5f 91       	pop	r21
     900:	4f 91       	pop	r20
     902:	3f 91       	pop	r19
     904:	2f 91       	pop	r18
     906:	0f 90       	pop	r0
     908:	0f be       	out	0x3f, r0	; 63
     90a:	0f 90       	pop	r0
     90c:	1f 90       	pop	r1
     90e:	18 95       	reti

00000910 <_Z17Serial0_availablev>:
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
     910:	86 ee       	ldi	r24, 0xE6	; 230
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 f6 02 	call	0x5ec	; 0x5ec <_ZN14HardwareSerial9availableEv>
     918:	21 e0       	ldi	r18, 0x01	; 1
     91a:	89 2b       	or	r24, r25
     91c:	09 f4       	brne	.+2      	; 0x920 <_Z17Serial0_availablev+0x10>
     91e:	20 e0       	ldi	r18, 0x00	; 0
}
     920:	82 2f       	mov	r24, r18
     922:	08 95       	ret

00000924 <_GLOBAL__sub_I___vector_18>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     924:	e6 ee       	ldi	r30, 0xE6	; 230
     926:	f1 e0       	ldi	r31, 0x01	; 1
     928:	13 82       	std	Z+3, r1	; 0x03
     92a:	12 82       	std	Z+2, r1	; 0x02
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     92c:	88 ee       	ldi	r24, 0xE8	; 232
     92e:	93 e0       	ldi	r25, 0x03	; 3
     930:	a0 e0       	ldi	r26, 0x00	; 0
     932:	b0 e0       	ldi	r27, 0x00	; 0
     934:	84 83       	std	Z+4, r24	; 0x04
     936:	95 83       	std	Z+5, r25	; 0x05
     938:	a6 83       	std	Z+6, r26	; 0x06
     93a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
     93c:	80 e7       	ldi	r24, 0x70	; 112
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	91 83       	std	Z+1, r25	; 0x01
     942:	80 83       	st	Z, r24
     944:	85 ec       	ldi	r24, 0xC5	; 197
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	95 87       	std	Z+13, r25	; 0x0d
     94a:	84 87       	std	Z+12, r24	; 0x0c
     94c:	84 ec       	ldi	r24, 0xC4	; 196
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	97 87       	std	Z+15, r25	; 0x0f
     952:	86 87       	std	Z+14, r24	; 0x0e
     954:	80 ec       	ldi	r24, 0xC0	; 192
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	91 8b       	std	Z+17, r25	; 0x11
     95a:	80 8b       	std	Z+16, r24	; 0x10
     95c:	81 ec       	ldi	r24, 0xC1	; 193
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	93 8b       	std	Z+19, r25	; 0x13
     962:	82 8b       	std	Z+18, r24	; 0x12
     964:	82 ec       	ldi	r24, 0xC2	; 194
     966:	90 e0       	ldi	r25, 0x00	; 0
     968:	95 8b       	std	Z+21, r25	; 0x15
     96a:	84 8b       	std	Z+20, r24	; 0x14
     96c:	86 ec       	ldi	r24, 0xC6	; 198
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	97 8b       	std	Z+23, r25	; 0x17
     972:	86 8b       	std	Z+22, r24	; 0x16
     974:	11 8e       	std	Z+25, r1	; 0x19
     976:	12 8e       	std	Z+26, r1	; 0x1a
     978:	13 8e       	std	Z+27, r1	; 0x1b
     97a:	14 8e       	std	Z+28, r1	; 0x1c
     97c:	08 95       	ret

0000097e <initVariant>:
     97e:	08 95       	ret

00000980 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
     980:	0e 94 af 06 	call	0xd5e	; 0xd5e <init>

	initVariant();
     984:	0e 94 bf 04 	call	0x97e	; 0x97e <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
     988:	0e 94 ef 01 	call	0x3de	; 0x3de <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
     98c:	c3 e3       	ldi	r28, 0x33	; 51
     98e:	d3 e0       	ldi	r29, 0x03	; 3
#endif
	
	setup();
    
	for (;;) {
		loop();
     990:	0e 94 8e 02 	call	0x51c	; 0x51c <loop>
		if (serialEventRun) serialEventRun();
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	e1 f3       	breq	.-8      	; 0x990 <main+0x10>
     998:	0e 94 33 03 	call	0x666	; 0x666 <_Z14serialEventRunv>
     99c:	f9 cf       	rjmp	.-14     	; 0x990 <main+0x10>

0000099e <_ZN5Print5writeEPKhj>:
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
     99e:	cf 92       	push	r12
     9a0:	df 92       	push	r13
     9a2:	ef 92       	push	r14
     9a4:	ff 92       	push	r15
     9a6:	0f 93       	push	r16
     9a8:	1f 93       	push	r17
     9aa:	cf 93       	push	r28
     9ac:	df 93       	push	r29
     9ae:	6c 01       	movw	r12, r24
     9b0:	7a 01       	movw	r14, r20
     9b2:	8b 01       	movw	r16, r22
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	d0 e0       	ldi	r29, 0x00	; 0
     9b8:	ce 15       	cp	r28, r14
     9ba:	df 05       	cpc	r29, r15
     9bc:	81 f0       	breq	.+32     	; 0x9de <_ZN5Print5writeEPKhj+0x40>
     9be:	d8 01       	movw	r26, r16
     9c0:	6d 91       	ld	r22, X+
     9c2:	8d 01       	movw	r16, r26
     9c4:	d6 01       	movw	r26, r12
     9c6:	ed 91       	ld	r30, X+
     9c8:	fc 91       	ld	r31, X
     9ca:	01 90       	ld	r0, Z+
     9cc:	f0 81       	ld	r31, Z
     9ce:	e0 2d       	mov	r30, r0
     9d0:	c6 01       	movw	r24, r12
     9d2:	09 95       	icall
     9d4:	89 2b       	or	r24, r25
     9d6:	11 f0       	breq	.+4      	; 0x9dc <_ZN5Print5writeEPKhj+0x3e>
     9d8:	21 96       	adiw	r28, 0x01	; 1
     9da:	ee cf       	rjmp	.-36     	; 0x9b8 <_ZN5Print5writeEPKhj+0x1a>
     9dc:	7e 01       	movw	r14, r28
     9de:	c7 01       	movw	r24, r14
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	1f 91       	pop	r17
     9e6:	0f 91       	pop	r16
     9e8:	ff 90       	pop	r15
     9ea:	ef 90       	pop	r14
     9ec:	df 90       	pop	r13
     9ee:	cf 90       	pop	r12
     9f0:	08 95       	ret

000009f2 <_ZN5Print5writeEPKc>:
     9f2:	61 15       	cp	r22, r1
     9f4:	71 05       	cpc	r23, r1
     9f6:	79 f0       	breq	.+30     	; 0xa16 <_ZN5Print5writeEPKc+0x24>
     9f8:	fb 01       	movw	r30, r22
     9fa:	01 90       	ld	r0, Z+
     9fc:	00 20       	and	r0, r0
     9fe:	e9 f7       	brne	.-6      	; 0x9fa <_ZN5Print5writeEPKc+0x8>
     a00:	31 97       	sbiw	r30, 0x01	; 1
     a02:	af 01       	movw	r20, r30
     a04:	46 1b       	sub	r20, r22
     a06:	57 0b       	sbc	r21, r23
     a08:	dc 01       	movw	r26, r24
     a0a:	ed 91       	ld	r30, X+
     a0c:	fc 91       	ld	r31, X
     a0e:	02 80       	ldd	r0, Z+2	; 0x02
     a10:	f3 81       	ldd	r31, Z+3	; 0x03
     a12:	e0 2d       	mov	r30, r0
     a14:	09 94       	ijmp
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	08 95       	ret

00000a1c <_ZN5Print5printEPK19__FlashStringHelper>:
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	8c 01       	movw	r16, r24
     a2a:	7b 01       	movw	r14, r22
     a2c:	c0 e0       	ldi	r28, 0x00	; 0
     a2e:	d0 e0       	ldi	r29, 0x00	; 0
     a30:	f7 01       	movw	r30, r14
     a32:	ec 0f       	add	r30, r28
     a34:	fd 1f       	adc	r31, r29
     a36:	64 91       	lpm	r22, Z
     a38:	66 23       	and	r22, r22
     a3a:	61 f0       	breq	.+24     	; 0xa54 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     a3c:	d8 01       	movw	r26, r16
     a3e:	ed 91       	ld	r30, X+
     a40:	fc 91       	ld	r31, X
     a42:	01 90       	ld	r0, Z+
     a44:	f0 81       	ld	r31, Z
     a46:	e0 2d       	mov	r30, r0
     a48:	c8 01       	movw	r24, r16
     a4a:	09 95       	icall
     a4c:	89 2b       	or	r24, r25
     a4e:	11 f0       	breq	.+4      	; 0xa54 <_ZN5Print5printEPK19__FlashStringHelper+0x38>
     a50:	21 96       	adiw	r28, 0x01	; 1
     a52:	ee cf       	rjmp	.-36     	; 0xa30 <_ZN5Print5printEPK19__FlashStringHelper+0x14>
     a54:	ce 01       	movw	r24, r28
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	1f 91       	pop	r17
     a5c:	0f 91       	pop	r16
     a5e:	ff 90       	pop	r15
     a60:	ef 90       	pop	r14
     a62:	08 95       	ret

00000a64 <_ZN5Print5printEc>:
     a64:	dc 01       	movw	r26, r24
     a66:	ed 91       	ld	r30, X+
     a68:	fc 91       	ld	r31, X
     a6a:	01 90       	ld	r0, Z+
     a6c:	f0 81       	ld	r31, Z
     a6e:	e0 2d       	mov	r30, r0
     a70:	09 94       	ijmp

00000a72 <_ZN5Print7printlnEv>:
     a72:	6e e7       	ldi	r22, 0x7E	; 126
     a74:	71 e0       	ldi	r23, 0x01	; 1
     a76:	0c 94 f9 04 	jmp	0x9f2	; 0x9f2 <_ZN5Print5writeEPKc>

00000a7a <_ZN5Print7printlnEPK19__FlashStringHelper>:
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN5Print5printEPK19__FlashStringHelper>
     a88:	8c 01       	movw	r16, r24
     a8a:	ce 01       	movw	r24, r28
     a8c:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN5Print7printlnEv>
     a90:	80 0f       	add	r24, r16
     a92:	91 1f       	adc	r25, r17
     a94:	df 91       	pop	r29
     a96:	cf 91       	pop	r28
     a98:	1f 91       	pop	r17
     a9a:	0f 91       	pop	r16
     a9c:	08 95       	ret

00000a9e <_ZN5Print7printlnEPKc>:
     a9e:	0f 93       	push	r16
     aa0:	1f 93       	push	r17
     aa2:	cf 93       	push	r28
     aa4:	df 93       	push	r29
     aa6:	ec 01       	movw	r28, r24
     aa8:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN5Print5writeEPKc>
     aac:	8c 01       	movw	r16, r24
     aae:	ce 01       	movw	r24, r28
     ab0:	0e 94 39 05 	call	0xa72	; 0xa72 <_ZN5Print7printlnEv>
     ab4:	80 0f       	add	r24, r16
     ab6:	91 1f       	adc	r25, r17
     ab8:	df 91       	pop	r29
     aba:	cf 91       	pop	r28
     abc:	1f 91       	pop	r17
     abe:	0f 91       	pop	r16
     ac0:	08 95       	ret

00000ac2 <_ZN5Print11printNumberEmh>:
     ac2:	8f 92       	push	r8
     ac4:	9f 92       	push	r9
     ac6:	af 92       	push	r10
     ac8:	bf 92       	push	r11
     aca:	ef 92       	push	r14
     acc:	ff 92       	push	r15
     ace:	0f 93       	push	r16
     ad0:	1f 93       	push	r17
     ad2:	cf 93       	push	r28
     ad4:	df 93       	push	r29
     ad6:	cd b7       	in	r28, 0x3d	; 61
     ad8:	de b7       	in	r29, 0x3e	; 62
     ada:	a1 97       	sbiw	r28, 0x21	; 33
     adc:	0f b6       	in	r0, 0x3f	; 63
     ade:	f8 94       	cli
     ae0:	de bf       	out	0x3e, r29	; 62
     ae2:	0f be       	out	0x3f, r0	; 63
     ae4:	cd bf       	out	0x3d, r28	; 61
     ae6:	7c 01       	movw	r14, r24
     ae8:	fa 01       	movw	r30, r20
     aea:	cb 01       	movw	r24, r22
     aec:	19 a2       	std	Y+33, r1	; 0x21
     aee:	22 30       	cpi	r18, 0x02	; 2
     af0:	08 f4       	brcc	.+2      	; 0xaf4 <_ZN5Print11printNumberEmh+0x32>
     af2:	2a e0       	ldi	r18, 0x0A	; 10
     af4:	8e 01       	movw	r16, r28
     af6:	0f 5d       	subi	r16, 0xDF	; 223
     af8:	1f 4f       	sbci	r17, 0xFF	; 255
     afa:	82 2e       	mov	r8, r18
     afc:	91 2c       	mov	r9, r1
     afe:	a1 2c       	mov	r10, r1
     b00:	b1 2c       	mov	r11, r1
     b02:	bf 01       	movw	r22, r30
     b04:	a5 01       	movw	r20, r10
     b06:	94 01       	movw	r18, r8
     b08:	0e 94 a8 11 	call	0x2350	; 0x2350 <__udivmodsi4>
     b0c:	f9 01       	movw	r30, r18
     b0e:	ca 01       	movw	r24, r20
     b10:	01 50       	subi	r16, 0x01	; 1
     b12:	11 09       	sbc	r17, r1
     b14:	6a 30       	cpi	r22, 0x0A	; 10
     b16:	10 f4       	brcc	.+4      	; 0xb1c <_ZN5Print11printNumberEmh+0x5a>
     b18:	60 5d       	subi	r22, 0xD0	; 208
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <_ZN5Print11printNumberEmh+0x5c>
     b1c:	69 5c       	subi	r22, 0xC9	; 201
     b1e:	d8 01       	movw	r26, r16
     b20:	6c 93       	st	X, r22
     b22:	23 2b       	or	r18, r19
     b24:	24 2b       	or	r18, r20
     b26:	25 2b       	or	r18, r21
     b28:	61 f7       	brne	.-40     	; 0xb02 <_ZN5Print11printNumberEmh+0x40>
     b2a:	b8 01       	movw	r22, r16
     b2c:	c7 01       	movw	r24, r14
     b2e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <_ZN5Print5writeEPKc>
     b32:	a1 96       	adiw	r28, 0x21	; 33
     b34:	0f b6       	in	r0, 0x3f	; 63
     b36:	f8 94       	cli
     b38:	de bf       	out	0x3e, r29	; 62
     b3a:	0f be       	out	0x3f, r0	; 63
     b3c:	cd bf       	out	0x3d, r28	; 61
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	ff 90       	pop	r15
     b48:	ef 90       	pop	r14
     b4a:	bf 90       	pop	r11
     b4c:	af 90       	pop	r10
     b4e:	9f 90       	pop	r9
     b50:	8f 90       	pop	r8
     b52:	08 95       	ret

00000b54 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
  if (base == 0) {
     b64:	21 15       	cp	r18, r1
     b66:	31 05       	cpc	r19, r1
     b68:	81 f4       	brne	.+32     	; 0xb8a <_ZN5Print5printEli+0x36>
    return write(n);
     b6a:	dc 01       	movw	r26, r24
     b6c:	ed 91       	ld	r30, X+
     b6e:	fc 91       	ld	r31, X
     b70:	01 90       	ld	r0, Z+
     b72:	f0 81       	ld	r31, Z
     b74:	e0 2d       	mov	r30, r0
     b76:	64 2f       	mov	r22, r20
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
     b88:	09 94       	ijmp
  } else if (base == 10) {
     b8a:	2a 30       	cpi	r18, 0x0A	; 10
     b8c:	31 05       	cpc	r19, r1
     b8e:	01 f5       	brne	.+64     	; 0xbd0 <_ZN5Print5printEli+0x7c>
    if (n < 0) {
     b90:	77 ff       	sbrs	r23, 7
     b92:	1d c0       	rjmp	.+58     	; 0xbce <_ZN5Print5printEli+0x7a>
     b94:	6a 01       	movw	r12, r20
     b96:	7b 01       	movw	r14, r22
     b98:	ec 01       	movw	r28, r24
      int t = print('-');
     b9a:	6d e2       	ldi	r22, 0x2D	; 45
     b9c:	0e 94 32 05 	call	0xa64	; 0xa64 <_ZN5Print5printEc>
     ba0:	8c 01       	movw	r16, r24
      n = -n;
      return printNumber(n, 10) + t;
     ba2:	44 27       	eor	r20, r20
     ba4:	55 27       	eor	r21, r21
     ba6:	ba 01       	movw	r22, r20
     ba8:	4c 19       	sub	r20, r12
     baa:	5d 09       	sbc	r21, r13
     bac:	6e 09       	sbc	r22, r14
     bae:	7f 09       	sbc	r23, r15
     bb0:	2a e0       	ldi	r18, 0x0A	; 10
     bb2:	ce 01       	movw	r24, r28
     bb4:	0e 94 61 05 	call	0xac2	; 0xac2 <_ZN5Print11printNumberEmh>
     bb8:	80 0f       	add	r24, r16
     bba:	91 1f       	adc	r25, r17
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	1f 91       	pop	r17
     bc2:	0f 91       	pop	r16
     bc4:	ff 90       	pop	r15
     bc6:	ef 90       	pop	r14
     bc8:	df 90       	pop	r13
     bca:	cf 90       	pop	r12
     bcc:	08 95       	ret
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
     bce:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  }
}
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	1f 91       	pop	r17
     bd6:	0f 91       	pop	r16
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
     be0:	0c 94 61 05 	jmp	0xac2	; 0xac2 <_ZN5Print11printNumberEmh>

00000be4 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
     be4:	9a 01       	movw	r18, r20
  return print((long) n, base);
     be6:	ab 01       	movw	r20, r22
     be8:	77 0f       	add	r23, r23
     bea:	66 0b       	sbc	r22, r22
     bec:	77 0b       	sbc	r23, r23
     bee:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <_ZN5Print5printEli>

00000bf2 <__vector_16>:
	cli();
	m = timer0_millis;
	SREG = oldSREG;

	return m;
}
     bf2:	1f 92       	push	r1
     bf4:	0f 92       	push	r0
     bf6:	0f b6       	in	r0, 0x3f	; 63
     bf8:	0f 92       	push	r0
     bfa:	11 24       	eor	r1, r1
     bfc:	2f 93       	push	r18
     bfe:	3f 93       	push	r19
     c00:	8f 93       	push	r24
     c02:	9f 93       	push	r25
     c04:	af 93       	push	r26
     c06:	bf 93       	push	r27
     c08:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <timer0_millis>
     c0c:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <timer0_millis+0x1>
     c10:	a0 91 86 02 	lds	r26, 0x0286	; 0x800286 <timer0_millis+0x2>
     c14:	b0 91 87 02 	lds	r27, 0x0287	; 0x800287 <timer0_millis+0x3>
     c18:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <timer0_fract>
     c1c:	23 e0       	ldi	r18, 0x03	; 3
     c1e:	23 0f       	add	r18, r19
     c20:	2d 37       	cpi	r18, 0x7D	; 125
     c22:	20 f4       	brcc	.+8      	; 0xc2c <__vector_16+0x3a>
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	a1 1d       	adc	r26, r1
     c28:	b1 1d       	adc	r27, r1
     c2a:	05 c0       	rjmp	.+10     	; 0xc36 <__vector_16+0x44>
     c2c:	26 e8       	ldi	r18, 0x86	; 134
     c2e:	23 0f       	add	r18, r19
     c30:	02 96       	adiw	r24, 0x02	; 2
     c32:	a1 1d       	adc	r26, r1
     c34:	b1 1d       	adc	r27, r1
     c36:	20 93 83 02 	sts	0x0283, r18	; 0x800283 <timer0_fract>
     c3a:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <timer0_millis>
     c3e:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <timer0_millis+0x1>
     c42:	a0 93 86 02 	sts	0x0286, r26	; 0x800286 <timer0_millis+0x2>
     c46:	b0 93 87 02 	sts	0x0287, r27	; 0x800287 <timer0_millis+0x3>
     c4a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <timer0_overflow_count>
     c4e:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <timer0_overflow_count+0x1>
     c52:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <timer0_overflow_count+0x2>
     c56:	b0 91 8b 02 	lds	r27, 0x028B	; 0x80028b <timer0_overflow_count+0x3>
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	a1 1d       	adc	r26, r1
     c5e:	b1 1d       	adc	r27, r1
     c60:	80 93 88 02 	sts	0x0288, r24	; 0x800288 <timer0_overflow_count>
     c64:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <timer0_overflow_count+0x1>
     c68:	a0 93 8a 02 	sts	0x028A, r26	; 0x80028a <timer0_overflow_count+0x2>
     c6c:	b0 93 8b 02 	sts	0x028B, r27	; 0x80028b <timer0_overflow_count+0x3>
     c70:	bf 91       	pop	r27
     c72:	af 91       	pop	r26
     c74:	9f 91       	pop	r25
     c76:	8f 91       	pop	r24
     c78:	3f 91       	pop	r19
     c7a:	2f 91       	pop	r18
     c7c:	0f 90       	pop	r0
     c7e:	0f be       	out	0x3f, r0	; 63
     c80:	0f 90       	pop	r0
     c82:	1f 90       	pop	r1
     c84:	18 95       	reti

00000c86 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     c86:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
     c88:	f8 94       	cli
	m = timer0_overflow_count;
     c8a:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <timer0_overflow_count>
     c8e:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <timer0_overflow_count+0x1>
     c92:	a0 91 8a 02 	lds	r26, 0x028A	; 0x80028a <timer0_overflow_count+0x2>
     c96:	b0 91 8b 02 	lds	r27, 0x028B	; 0x80028b <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
     c9a:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     c9c:	a8 9b       	sbis	0x15, 0	; 21
     c9e:	05 c0       	rjmp	.+10     	; 0xcaa <micros+0x24>
     ca0:	2f 3f       	cpi	r18, 0xFF	; 255
     ca2:	19 f0       	breq	.+6      	; 0xcaa <micros+0x24>
		m++;
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	a1 1d       	adc	r26, r1
     ca8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     caa:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     cac:	ba 2f       	mov	r27, r26
     cae:	a9 2f       	mov	r26, r25
     cb0:	98 2f       	mov	r25, r24
     cb2:	88 27       	eor	r24, r24
     cb4:	82 0f       	add	r24, r18
     cb6:	91 1d       	adc	r25, r1
     cb8:	a1 1d       	adc	r26, r1
     cba:	b1 1d       	adc	r27, r1
     cbc:	bc 01       	movw	r22, r24
     cbe:	cd 01       	movw	r24, r26
     cc0:	42 e0       	ldi	r20, 0x02	; 2
     cc2:	66 0f       	add	r22, r22
     cc4:	77 1f       	adc	r23, r23
     cc6:	88 1f       	adc	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	4a 95       	dec	r20
     ccc:	d1 f7       	brne	.-12     	; 0xcc2 <micros+0x3c>
}
     cce:	08 95       	ret

00000cd0 <delay>:

void delay(unsigned long ms)
{
     cd0:	8f 92       	push	r8
     cd2:	9f 92       	push	r9
     cd4:	af 92       	push	r10
     cd6:	bf 92       	push	r11
     cd8:	cf 92       	push	r12
     cda:	df 92       	push	r13
     cdc:	ef 92       	push	r14
     cde:	ff 92       	push	r15
     ce0:	6b 01       	movw	r12, r22
     ce2:	7c 01       	movw	r14, r24
	uint32_t start = micros();
     ce4:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
     ce8:	4b 01       	movw	r8, r22
     cea:	5c 01       	movw	r10, r24

	while (ms > 0) {
     cec:	c1 14       	cp	r12, r1
     cee:	d1 04       	cpc	r13, r1
     cf0:	e1 04       	cpc	r14, r1
     cf2:	f1 04       	cpc	r15, r1
     cf4:	01 f1       	breq	.+64     	; 0xd36 <delay+0x66>
		yield();
     cf6:	0e 94 a7 11 	call	0x234e	; 0x234e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
     cfa:	0e 94 43 06 	call	0xc86	; 0xc86 <micros>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	88 19       	sub	r24, r8
     d04:	99 09       	sbc	r25, r9
     d06:	aa 09       	sbc	r26, r10
     d08:	bb 09       	sbc	r27, r11
     d0a:	88 3e       	cpi	r24, 0xE8	; 232
     d0c:	93 40       	sbci	r25, 0x03	; 3
     d0e:	a1 05       	cpc	r26, r1
     d10:	b1 05       	cpc	r27, r1
     d12:	60 f3       	brcs	.-40     	; 0xcec <delay+0x1c>
			ms--;
     d14:	21 e0       	ldi	r18, 0x01	; 1
     d16:	c2 1a       	sub	r12, r18
     d18:	d1 08       	sbc	r13, r1
     d1a:	e1 08       	sbc	r14, r1
     d1c:	f1 08       	sbc	r15, r1
			start += 1000;
     d1e:	88 ee       	ldi	r24, 0xE8	; 232
     d20:	88 0e       	add	r8, r24
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	98 1e       	adc	r9, r24
     d26:	a1 1c       	adc	r10, r1
     d28:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
     d2a:	c1 14       	cp	r12, r1
     d2c:	d1 04       	cpc	r13, r1
     d2e:	e1 04       	cpc	r14, r1
     d30:	f1 04       	cpc	r15, r1
     d32:	19 f7       	brne	.-58     	; 0xcfa <delay+0x2a>
     d34:	db cf       	rjmp	.-74     	; 0xcec <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	df 90       	pop	r13
     d3c:	cf 90       	pop	r12
     d3e:	bf 90       	pop	r11
     d40:	af 90       	pop	r10
     d42:	9f 90       	pop	r9
     d44:	8f 90       	pop	r8
     d46:	08 95       	ret

00000d48 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
     d48:	82 30       	cpi	r24, 0x02	; 2
     d4a:	91 05       	cpc	r25, r1
     d4c:	38 f0       	brcs	.+14     	; 0xd5c <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
     d4e:	88 0f       	add	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	88 0f       	add	r24, r24
     d54:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
     d56:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	f1 f7       	brne	.-4      	; 0xd58 <delayMicroseconds+0x10>
     d5c:	08 95       	ret

00000d5e <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     d5e:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     d60:	84 b5       	in	r24, 0x24	; 36
     d62:	82 60       	ori	r24, 0x02	; 2
     d64:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     d66:	84 b5       	in	r24, 0x24	; 36
     d68:	81 60       	ori	r24, 0x01	; 1
     d6a:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     d6c:	85 b5       	in	r24, 0x25	; 37
     d6e:	82 60       	ori	r24, 0x02	; 2
     d70:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     d72:	85 b5       	in	r24, 0x25	; 37
     d74:	81 60       	ori	r24, 0x01	; 1
     d76:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     d78:	ee e6       	ldi	r30, 0x6E	; 110
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	81 60       	ori	r24, 0x01	; 1
     d80:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     d82:	e1 e8       	ldi	r30, 0x81	; 129
     d84:	f0 e0       	ldi	r31, 0x00	; 0
     d86:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     d88:	80 81       	ld	r24, Z
     d8a:	82 60       	ori	r24, 0x02	; 2
     d8c:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     d8e:	80 81       	ld	r24, Z
     d90:	81 60       	ori	r24, 0x01	; 1
     d92:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     d94:	e0 e8       	ldi	r30, 0x80	; 128
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	81 60       	ori	r24, 0x01	; 1
     d9c:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     d9e:	e1 eb       	ldi	r30, 0xB1	; 177
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	84 60       	ori	r24, 0x04	; 4
     da6:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     da8:	e0 eb       	ldi	r30, 0xB0	; 176
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	81 60       	ori	r24, 0x01	; 1
     db0:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
     db2:	ea e7       	ldi	r30, 0x7A	; 122
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	84 60       	ori	r24, 0x04	; 4
     dba:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
     dbc:	80 81       	ld	r24, Z
     dbe:	82 60       	ori	r24, 0x02	; 2
     dc0:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
     dc2:	80 81       	ld	r24, Z
     dc4:	81 60       	ori	r24, 0x01	; 1
     dc6:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     dc8:	80 81       	ld	r24, Z
     dca:	80 68       	ori	r24, 0x80	; 128
     dcc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
     dce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
     dd2:	08 95       	ret

00000dd4 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
     dd4:	83 30       	cpi	r24, 0x03	; 3
     dd6:	81 f0       	breq	.+32     	; 0xdf8 <turnOffPWM+0x24>
     dd8:	28 f4       	brcc	.+10     	; 0xde4 <turnOffPWM+0x10>
     dda:	81 30       	cpi	r24, 0x01	; 1
     ddc:	99 f0       	breq	.+38     	; 0xe04 <turnOffPWM+0x30>
     dde:	82 30       	cpi	r24, 0x02	; 2
     de0:	a1 f0       	breq	.+40     	; 0xe0a <turnOffPWM+0x36>
     de2:	08 95       	ret
     de4:	87 30       	cpi	r24, 0x07	; 7
     de6:	a9 f0       	breq	.+42     	; 0xe12 <turnOffPWM+0x3e>
     de8:	88 30       	cpi	r24, 0x08	; 8
     dea:	b9 f0       	breq	.+46     	; 0xe1a <turnOffPWM+0x46>
     dec:	84 30       	cpi	r24, 0x04	; 4
     dee:	d1 f4       	brne	.+52     	; 0xe24 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     df0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     df4:	8f 7d       	andi	r24, 0xDF	; 223
     df6:	03 c0       	rjmp	.+6      	; 0xdfe <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
     df8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     dfc:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
     dfe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     e02:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
     e04:	84 b5       	in	r24, 0x24	; 36
     e06:	8f 77       	andi	r24, 0x7F	; 127
     e08:	02 c0       	rjmp	.+4      	; 0xe0e <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
     e0a:	84 b5       	in	r24, 0x24	; 36
     e0c:	8f 7d       	andi	r24, 0xDF	; 223
     e0e:	84 bd       	out	0x24, r24	; 36
     e10:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
     e12:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e16:	8f 77       	andi	r24, 0x7F	; 127
     e18:	03 c0       	rjmp	.+6      	; 0xe20 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
     e1a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e1e:	8f 7d       	andi	r24, 0xDF	; 223
     e20:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     e24:	08 95       	ret

00000e26 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
     e26:	cf 93       	push	r28
     e28:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	fc 01       	movw	r30, r24
     e2e:	e9 54       	subi	r30, 0x49	; 73
     e30:	ff 4f       	sbci	r31, 0xFF	; 255
     e32:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
     e34:	fc 01       	movw	r30, r24
     e36:	e5 53       	subi	r30, 0x35	; 53
     e38:	ff 4f       	sbci	r31, 0xFF	; 255
     e3a:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
     e3c:	88 23       	and	r24, r24
     e3e:	61 f1       	breq	.+88     	; 0xe98 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	88 0f       	add	r24, r24
     e44:	99 1f       	adc	r25, r25
     e46:	fc 01       	movw	r30, r24
     e48:	ed 50       	subi	r30, 0x0D	; 13
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	c5 91       	lpm	r28, Z+
     e4e:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
     e50:	fc 01       	movw	r30, r24
     e52:	e7 51       	subi	r30, 0x17	; 23
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	a5 91       	lpm	r26, Z+
     e58:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
     e5a:	61 11       	cpse	r22, r1
     e5c:	09 c0       	rjmp	.+18     	; 0xe70 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
     e5e:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e60:	f8 94       	cli
		*reg &= ~bit;
     e62:	88 81       	ld	r24, Y
     e64:	20 95       	com	r18
     e66:	82 23       	and	r24, r18
     e68:	88 83       	st	Y, r24
		*out &= ~bit;
     e6a:	ec 91       	ld	r30, X
     e6c:	2e 23       	and	r18, r30
     e6e:	0b c0       	rjmp	.+22     	; 0xe86 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
     e70:	62 30       	cpi	r22, 0x02	; 2
     e72:	61 f4       	brne	.+24     	; 0xe8c <pinMode+0x66>
		uint8_t oldSREG = SREG;
     e74:	9f b7       	in	r25, 0x3f	; 63
                cli();
     e76:	f8 94       	cli
		*reg &= ~bit;
     e78:	88 81       	ld	r24, Y
     e7a:	32 2f       	mov	r19, r18
     e7c:	30 95       	com	r19
     e7e:	83 23       	and	r24, r19
     e80:	88 83       	st	Y, r24
		*out |= bit;
     e82:	ec 91       	ld	r30, X
     e84:	2e 2b       	or	r18, r30
     e86:	2c 93       	st	X, r18
		SREG = oldSREG;
     e88:	9f bf       	out	0x3f, r25	; 63
     e8a:	06 c0       	rjmp	.+12     	; 0xe98 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
     e8c:	8f b7       	in	r24, 0x3f	; 63
                cli();
     e8e:	f8 94       	cli
		*reg |= bit;
     e90:	e8 81       	ld	r30, Y
     e92:	2e 2b       	or	r18, r30
     e94:	28 83       	st	Y, r18
		SREG = oldSREG;
     e96:	8f bf       	out	0x3f, r24	; 63
	}
}
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	08 95       	ret

00000e9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
     e9e:	1f 93       	push	r17
     ea0:	cf 93       	push	r28
     ea2:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	f9 01       	movw	r30, r18
     eaa:	ed 55       	subi	r30, 0x5D	; 93
     eac:	ff 4f       	sbci	r31, 0xFF	; 255
     eae:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     eb0:	f9 01       	movw	r30, r18
     eb2:	e9 54       	subi	r30, 0x49	; 73
     eb4:	ff 4f       	sbci	r31, 0xFF	; 255
     eb6:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     eb8:	f9 01       	movw	r30, r18
     eba:	e5 53       	subi	r30, 0x35	; 53
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
     ec0:	cc 23       	and	r28, r28
     ec2:	c1 f0       	breq	.+48     	; 0xef4 <digitalWrite+0x56>
     ec4:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     ec6:	81 11       	cpse	r24, r1
     ec8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <turnOffPWM>

	out = portOutputRegister(port);
     ecc:	ec 2f       	mov	r30, r28
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	ee 0f       	add	r30, r30
     ed2:	ff 1f       	adc	r31, r31
     ed4:	e7 51       	subi	r30, 0x17	; 23
     ed6:	ff 4f       	sbci	r31, 0xFF	; 255
     ed8:	a5 91       	lpm	r26, Z+
     eda:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
     edc:	9f b7       	in	r25, 0x3f	; 63
	cli();
     ede:	f8 94       	cli

	if (val == LOW) {
     ee0:	11 11       	cpse	r17, r1
     ee2:	04 c0       	rjmp	.+8      	; 0xeec <digitalWrite+0x4e>
		*out &= ~bit;
     ee4:	8c 91       	ld	r24, X
     ee6:	d0 95       	com	r29
     ee8:	d8 23       	and	r29, r24
     eea:	02 c0       	rjmp	.+4      	; 0xef0 <digitalWrite+0x52>
	} else {
		*out |= bit;
     eec:	ec 91       	ld	r30, X
     eee:	de 2b       	or	r29, r30
     ef0:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
     ef2:	9f bf       	out	0x3f, r25	; 63
}
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	1f 91       	pop	r17
     efa:	08 95       	ret

00000efc <digitalRead>:

int digitalRead(uint8_t pin)
{
     efc:	cf 93       	push	r28
     efe:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
     f00:	28 2f       	mov	r18, r24
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	f9 01       	movw	r30, r18
     f06:	ed 55       	subi	r30, 0x5D	; 93
     f08:	ff 4f       	sbci	r31, 0xFF	; 255
     f0a:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
     f0c:	f9 01       	movw	r30, r18
     f0e:	e9 54       	subi	r30, 0x49	; 73
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
     f14:	f9 01       	movw	r30, r18
     f16:	e5 53       	subi	r30, 0x35	; 53
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
     f1c:	cc 23       	and	r28, r28
     f1e:	91 f0       	breq	.+36     	; 0xf44 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     f20:	81 11       	cpse	r24, r1
     f22:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
     f26:	ec 2f       	mov	r30, r28
     f28:	f0 e0       	ldi	r31, 0x00	; 0
     f2a:	ee 0f       	add	r30, r30
     f2c:	ff 1f       	adc	r31, r31
     f2e:	e1 52       	subi	r30, 0x21	; 33
     f30:	ff 4f       	sbci	r31, 0xFF	; 255
     f32:	a5 91       	lpm	r26, Z+
     f34:	b4 91       	lpm	r27, Z
     f36:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
     f38:	ed 23       	and	r30, r29
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	21 f4       	brne	.+8      	; 0xf48 <digitalRead+0x4c>
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	02 c0       	rjmp	.+4      	; 0xf48 <digitalRead+0x4c>
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
     f48:	df 91       	pop	r29
     f4a:	cf 91       	pop	r28
     f4c:	08 95       	ret

00000f4e <_ZN8SPIClass8transferEh>:

uint8_t RF24::getPALevel(void)
{

  return (read_register(RF_SETUP) & (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH))) >> 1 ;
}
     f4e:	8e bd       	out	0x2e, r24	; 46
     f50:	00 00       	nop
     f52:	0d b4       	in	r0, 0x2d	; 45
     f54:	07 fe       	sbrs	r0, 7
     f56:	fd cf       	rjmp	.-6      	; 0xf52 <_ZN8SPIClass8transferEh+0x4>
     f58:	8e b5       	in	r24, 0x2e	; 46
     f5a:	08 95       	ret

00000f5c <_ZN4RF243csnEb>:
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	ec 01       	movw	r28, r24
     f62:	8c b5       	in	r24, 0x2c	; 44
     f64:	8f 7d       	andi	r24, 0xDF	; 223
     f66:	8c bd       	out	0x2c, r24	; 44
     f68:	8c b5       	in	r24, 0x2c	; 44
     f6a:	83 7f       	andi	r24, 0xF3	; 243
     f6c:	8c bd       	out	0x2c, r24	; 44
     f6e:	8c b5       	in	r24, 0x2c	; 44
     f70:	8c 7f       	andi	r24, 0xFC	; 252
     f72:	8c bd       	out	0x2c, r24	; 44
     f74:	8d b5       	in	r24, 0x2d	; 45
     f76:	81 60       	ori	r24, 0x01	; 1
     f78:	8d bd       	out	0x2d, r24	; 45
     f7a:	8a 81       	ldd	r24, Y+2	; 0x02
     f7c:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
     f80:	8c 89       	ldd	r24, Y+20	; 0x14
     f82:	9d 89       	ldd	r25, Y+21	; 0x15
     f84:	df 91       	pop	r29
     f86:	cf 91       	pop	r28
     f88:	0c 94 a4 06 	jmp	0xd48	; 0xd48 <delayMicroseconds>

00000f8c <_ZN4RF242ceEb>:
     f8c:	fc 01       	movw	r30, r24
     f8e:	20 81       	ld	r18, Z
     f90:	31 81       	ldd	r19, Z+1	; 0x01
     f92:	82 81       	ldd	r24, Z+2	; 0x02
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	19 f0       	breq	.+6      	; 0xfa2 <_ZN4RF242ceEb+0x16>
     f9c:	82 2f       	mov	r24, r18
     f9e:	0c 94 4f 07 	jmp	0xe9e	; 0xe9e <digitalWrite>
     fa2:	08 95       	ret

00000fa4 <_ZN4RF2416beginTransactionEv>:
     fa4:	60 e0       	ldi	r22, 0x00	; 0
     fa6:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <_ZN4RF243csnEb>

00000faa <_ZN4RF2414endTransactionEv>:
     faa:	61 e0       	ldi	r22, 0x01	; 1
     fac:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <_ZN4RF243csnEb>

00000fb0 <_ZN4RF2413read_registerEh>:
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	ec 01       	movw	r28, r24
     fb8:	16 2f       	mov	r17, r22
     fba:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
     fbe:	81 2f       	mov	r24, r17
     fc0:	8f 71       	andi	r24, 0x1F	; 31
     fc2:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
     fcc:	18 2f       	mov	r17, r24
     fce:	ce 01       	movw	r24, r28
     fd0:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
     fd4:	81 2f       	mov	r24, r17
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	08 95       	ret

00000fde <_ZN4RF2414write_registerEhPKhh>:
     fde:	cf 92       	push	r12
     fe0:	df 92       	push	r13
     fe2:	ef 92       	push	r14
     fe4:	ff 92       	push	r15
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	7c 01       	movw	r14, r24
     ff0:	16 2f       	mov	r17, r22
     ff2:	6a 01       	movw	r12, r20
     ff4:	c2 2f       	mov	r28, r18
     ff6:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
     ffa:	81 2f       	mov	r24, r17
     ffc:	8f 71       	andi	r24, 0x1F	; 31
     ffe:	80 62       	ori	r24, 0x20	; 32
    1000:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1004:	d8 2f       	mov	r29, r24
    1006:	86 01       	movw	r16, r12
    1008:	cc 23       	and	r28, r28
    100a:	39 f0       	breq	.+14     	; 0x101a <_ZN4RF2414write_registerEhPKhh+0x3c>
    100c:	f8 01       	movw	r30, r16
    100e:	81 91       	ld	r24, Z+
    1010:	8f 01       	movw	r16, r30
    1012:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1016:	c1 50       	subi	r28, 0x01	; 1
    1018:	f7 cf       	rjmp	.-18     	; 0x1008 <_ZN4RF2414write_registerEhPKhh+0x2a>
    101a:	c7 01       	movw	r24, r14
    101c:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
    1020:	8d 2f       	mov	r24, r29
    1022:	df 91       	pop	r29
    1024:	cf 91       	pop	r28
    1026:	1f 91       	pop	r17
    1028:	0f 91       	pop	r16
    102a:	ff 90       	pop	r15
    102c:	ef 90       	pop	r14
    102e:	df 90       	pop	r13
    1030:	cf 90       	pop	r12
    1032:	08 95       	ret

00001034 <_ZN4RF2414write_registerEhh>:
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	8c 01       	movw	r16, r24
    103e:	c6 2f       	mov	r28, r22
    1040:	d4 2f       	mov	r29, r20
    1042:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
    1046:	8c 2f       	mov	r24, r28
    1048:	8f 71       	andi	r24, 0x1F	; 31
    104a:	80 62       	ori	r24, 0x20	; 32
    104c:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1050:	c8 2f       	mov	r28, r24
    1052:	8d 2f       	mov	r24, r29
    1054:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1058:	c8 01       	movw	r24, r16
    105a:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
    105e:	8c 2f       	mov	r24, r28
    1060:	df 91       	pop	r29
    1062:	cf 91       	pop	r28
    1064:	1f 91       	pop	r17
    1066:	0f 91       	pop	r16
    1068:	08 95       	ret

0000106a <_ZN4RF2413write_payloadEPKvhh>:
    106a:	bf 92       	push	r11
    106c:	cf 92       	push	r12
    106e:	df 92       	push	r13
    1070:	ef 92       	push	r14
    1072:	ff 92       	push	r15
    1074:	0f 93       	push	r16
    1076:	1f 93       	push	r17
    1078:	cf 93       	push	r28
    107a:	df 93       	push	r29
    107c:	8c 01       	movw	r16, r24
    107e:	b6 2e       	mov	r11, r22
    1080:	c7 2e       	mov	r12, r23
    1082:	f2 2e       	mov	r15, r18
    1084:	fc 01       	movw	r30, r24
    1086:	c7 81       	ldd	r28, Z+7	; 0x07
    1088:	dc 2f       	mov	r29, r28
    108a:	4c 17       	cp	r20, r28
    108c:	08 f4       	brcc	.+2      	; 0x1090 <_ZN4RF2413write_payloadEPKvhh+0x26>
    108e:	d4 2f       	mov	r29, r20
    1090:	f8 01       	movw	r30, r16
    1092:	80 85       	ldd	r24, Z+8	; 0x08
    1094:	81 11       	cpse	r24, r1
    1096:	02 c0       	rjmp	.+4      	; 0x109c <_ZN4RF2413write_payloadEPKvhh+0x32>
    1098:	cd 1b       	sub	r28, r29
    109a:	01 c0       	rjmp	.+2      	; 0x109e <_ZN4RF2413write_payloadEPKvhh+0x34>
    109c:	c0 e0       	ldi	r28, 0x00	; 0
    109e:	c8 01       	movw	r24, r16
    10a0:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
    10a4:	8f 2d       	mov	r24, r15
    10a6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    10aa:	d8 2e       	mov	r13, r24
    10ac:	eb 2c       	mov	r14, r11
    10ae:	fc 2c       	mov	r15, r12
    10b0:	dd 23       	and	r29, r29
    10b2:	39 f0       	breq	.+14     	; 0x10c2 <_ZN4RF2413write_payloadEPKvhh+0x58>
    10b4:	f7 01       	movw	r30, r14
    10b6:	81 91       	ld	r24, Z+
    10b8:	7f 01       	movw	r14, r30
    10ba:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    10be:	d1 50       	subi	r29, 0x01	; 1
    10c0:	f7 cf       	rjmp	.-18     	; 0x10b0 <_ZN4RF2413write_payloadEPKvhh+0x46>
    10c2:	cc 23       	and	r28, r28
    10c4:	29 f0       	breq	.+10     	; 0x10d0 <_ZN4RF2413write_payloadEPKvhh+0x66>
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    10cc:	c1 50       	subi	r28, 0x01	; 1
    10ce:	f9 cf       	rjmp	.-14     	; 0x10c2 <_ZN4RF2413write_payloadEPKvhh+0x58>
    10d0:	c8 01       	movw	r24, r16
    10d2:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
    10d6:	8d 2d       	mov	r24, r13
    10d8:	df 91       	pop	r29
    10da:	cf 91       	pop	r28
    10dc:	1f 91       	pop	r17
    10de:	0f 91       	pop	r16
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	bf 90       	pop	r11
    10ea:	08 95       	ret

000010ec <_ZN4RF2412read_payloadEPvh>:
    10ec:	bf 92       	push	r11
    10ee:	cf 92       	push	r12
    10f0:	df 92       	push	r13
    10f2:	ef 92       	push	r14
    10f4:	ff 92       	push	r15
    10f6:	0f 93       	push	r16
    10f8:	1f 93       	push	r17
    10fa:	cf 93       	push	r28
    10fc:	df 93       	push	r29
    10fe:	8c 01       	movw	r16, r24
    1100:	b6 2e       	mov	r11, r22
    1102:	c7 2e       	mov	r12, r23
    1104:	fc 01       	movw	r30, r24
    1106:	c7 81       	ldd	r28, Z+7	; 0x07
    1108:	dc 2f       	mov	r29, r28
    110a:	4c 17       	cp	r20, r28
    110c:	08 f4       	brcc	.+2      	; 0x1110 <_ZN4RF2412read_payloadEPvh+0x24>
    110e:	d4 2f       	mov	r29, r20
    1110:	f8 01       	movw	r30, r16
    1112:	80 85       	ldd	r24, Z+8	; 0x08
    1114:	81 11       	cpse	r24, r1
    1116:	02 c0       	rjmp	.+4      	; 0x111c <_ZN4RF2412read_payloadEPvh+0x30>
    1118:	cd 1b       	sub	r28, r29
    111a:	01 c0       	rjmp	.+2      	; 0x111e <_ZN4RF2412read_payloadEPvh+0x32>
    111c:	c0 e0       	ldi	r28, 0x00	; 0
    111e:	c8 01       	movw	r24, r16
    1120:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
    1124:	81 e6       	ldi	r24, 0x61	; 97
    1126:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    112a:	d8 2e       	mov	r13, r24
    112c:	eb 2c       	mov	r14, r11
    112e:	fc 2c       	mov	r15, r12
    1130:	dd 23       	and	r29, r29
    1132:	41 f0       	breq	.+16     	; 0x1144 <_ZN4RF2412read_payloadEPvh+0x58>
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    113a:	f7 01       	movw	r30, r14
    113c:	81 93       	st	Z+, r24
    113e:	7f 01       	movw	r14, r30
    1140:	d1 50       	subi	r29, 0x01	; 1
    1142:	f6 cf       	rjmp	.-20     	; 0x1130 <_ZN4RF2412read_payloadEPvh+0x44>
    1144:	cc 23       	and	r28, r28
    1146:	29 f0       	breq	.+10     	; 0x1152 <_ZN4RF2412read_payloadEPvh+0x66>
    1148:	8f ef       	ldi	r24, 0xFF	; 255
    114a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    114e:	c1 50       	subi	r28, 0x01	; 1
    1150:	f9 cf       	rjmp	.-14     	; 0x1144 <_ZN4RF2412read_payloadEPvh+0x58>
    1152:	c8 01       	movw	r24, r16
    1154:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
    1158:	8d 2d       	mov	r24, r13
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	1f 91       	pop	r17
    1160:	0f 91       	pop	r16
    1162:	ff 90       	pop	r15
    1164:	ef 90       	pop	r14
    1166:	df 90       	pop	r13
    1168:	cf 90       	pop	r12
    116a:	bf 90       	pop	r11
    116c:	08 95       	ret

0000116e <_ZN4RF248spiTransEh>:
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	ec 01       	movw	r28, r24
    1176:	16 2f       	mov	r17, r22
    1178:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
    117c:	81 2f       	mov	r24, r17
    117e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1182:	18 2f       	mov	r17, r24
    1184:	ce 01       	movw	r24, r28
    1186:	0e 94 d5 07 	call	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>
    118a:	81 2f       	mov	r24, r17
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	08 95       	ret

00001194 <_ZN4RF248flush_rxEv>:
    1194:	62 ee       	ldi	r22, 0xE2	; 226
    1196:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_ZN4RF248spiTransEh>

0000119a <_ZN4RF248flush_txEv>:
    119a:	61 ee       	ldi	r22, 0xE1	; 225
    119c:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_ZN4RF248spiTransEh>

000011a0 <_ZN4RF2410get_statusEv>:
    11a0:	6f ef       	ldi	r22, 0xFF	; 255
    11a2:	0c 94 b7 08 	jmp	0x116e	; 0x116e <_ZN4RF248spiTransEh>

000011a6 <_ZN4RF24C1Ejj>:
    11a6:	fc 01       	movw	r30, r24
    11a8:	71 83       	std	Z+1, r23	; 0x01
    11aa:	60 83       	st	Z, r22
    11ac:	53 83       	std	Z+3, r21	; 0x03
    11ae:	42 83       	std	Z+2, r20	; 0x02
    11b0:	16 82       	std	Z+6, r1	; 0x06
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	87 83       	std	Z+7, r24	; 0x07
    11b6:	10 86       	std	Z+8, r1	; 0x08
    11b8:	85 e0       	ldi	r24, 0x05	; 5
    11ba:	86 87       	std	Z+14, r24	; 0x0e
    11bc:	85 e0       	ldi	r24, 0x05	; 5
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	a0 e0       	ldi	r26, 0x00	; 0
    11c2:	b0 e0       	ldi	r27, 0x00	; 0
    11c4:	84 8b       	std	Z+20, r24	; 0x14
    11c6:	95 8b       	std	Z+21, r25	; 0x15
    11c8:	a6 8b       	std	Z+22, r26	; 0x16
    11ca:	b7 8b       	std	Z+23, r27	; 0x17
    11cc:	11 86       	std	Z+9, r1	; 0x09
    11ce:	08 95       	ret

000011d0 <_ZN4RF2410setChannelEh>:
    11d0:	6d 37       	cpi	r22, 0x7D	; 125
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <_ZN4RF2410setChannelEh+0x8>
    11d4:	46 2f       	mov	r20, r22
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <_ZN4RF2410setChannelEh+0xa>
    11d8:	4d e7       	ldi	r20, 0x7D	; 125
    11da:	65 e0       	ldi	r22, 0x05	; 5
    11dc:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

000011e0 <_ZN4RF2413stopListeningEv>:
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	ec 01       	movw	r28, r24
    11e6:	60 e0       	ldi	r22, 0x00	; 0
    11e8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4RF242ceEb>
    11ec:	88 89       	ldd	r24, Y+16	; 0x10
    11ee:	99 89       	ldd	r25, Y+17	; 0x11
    11f0:	0e 94 a4 06 	call	0xd48	; 0xd48 <delayMicroseconds>
    11f4:	6d e1       	ldi	r22, 0x1D	; 29
    11f6:	ce 01       	movw	r24, r28
    11f8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    11fc:	81 ff       	sbrs	r24, 1
    11fe:	07 c0       	rjmp	.+14     	; 0x120e <_ZN4RF2413stopListeningEv+0x2e>
    1200:	88 89       	ldd	r24, Y+16	; 0x10
    1202:	99 89       	ldd	r25, Y+17	; 0x11
    1204:	0e 94 a4 06 	call	0xd48	; 0xd48 <delayMicroseconds>
    1208:	ce 01       	movw	r24, r28
    120a:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN4RF248flush_txEv>
    120e:	60 e0       	ldi	r22, 0x00	; 0
    1210:	ce 01       	movw	r24, r28
    1212:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    1216:	48 2f       	mov	r20, r24
    1218:	4e 7f       	andi	r20, 0xFE	; 254
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	ce 01       	movw	r24, r28
    121e:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	ce 01       	movw	r24, r28
    1226:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    122a:	e9 e0       	ldi	r30, 0x09	; 9
    122c:	f1 e0       	ldi	r31, 0x01	; 1
    122e:	e4 91       	lpm	r30, Z
    1230:	41 e0       	ldi	r20, 0x01	; 1
    1232:	50 e0       	ldi	r21, 0x00	; 0
    1234:	01 c0       	rjmp	.+2      	; 0x1238 <_ZN4RF2413stopListeningEv+0x58>
    1236:	44 0f       	add	r20, r20
    1238:	ea 95       	dec	r30
    123a:	ea f7       	brpl	.-6      	; 0x1236 <_ZN4RF2413stopListeningEv+0x56>
    123c:	48 2b       	or	r20, r24
    123e:	62 e0       	ldi	r22, 0x02	; 2
    1240:	ce 01       	movw	r24, r28
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

0000124a <_ZN4RF247powerUpEv>:
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
    124e:	ec 01       	movw	r28, r24
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    1256:	81 fd       	sbrc	r24, 1
    1258:	0e c0       	rjmp	.+28     	; 0x1276 <_ZN4RF247powerUpEv+0x2c>
    125a:	48 2f       	mov	r20, r24
    125c:	42 60       	ori	r20, 0x02	; 2
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	ce 01       	movw	r24, r28
    1262:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    1266:	65 e0       	ldi	r22, 0x05	; 5
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	0c 94 68 06 	jmp	0xcd0	; 0xcd0 <delay>
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	08 95       	ret

0000127c <_ZN4RF2414startFastWriteEPKvhbb>:
    127c:	0f 93       	push	r16
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
    1282:	ec 01       	movw	r28, r24
    1284:	21 11       	cpse	r18, r1
    1286:	02 c0       	rjmp	.+4      	; 0x128c <_ZN4RF2414startFastWriteEPKvhbb+0x10>
    1288:	20 ea       	ldi	r18, 0xA0	; 160
    128a:	01 c0       	rjmp	.+2      	; 0x128e <_ZN4RF2414startFastWriteEPKvhbb+0x12>
    128c:	20 eb       	ldi	r18, 0xB0	; 176
    128e:	ce 01       	movw	r24, r28
    1290:	0e 94 35 08 	call	0x106a	; 0x106a <_ZN4RF2413write_payloadEPKvhh>
    1294:	00 23       	and	r16, r16
    1296:	39 f0       	breq	.+14     	; 0x12a6 <_ZN4RF2414startFastWriteEPKvhbb+0x2a>
    1298:	61 e0       	ldi	r22, 0x01	; 1
    129a:	ce 01       	movw	r24, r28
    129c:	df 91       	pop	r29
    129e:	cf 91       	pop	r28
    12a0:	0f 91       	pop	r16
    12a2:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <_ZN4RF242ceEb>
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	0f 91       	pop	r16
    12ac:	08 95       	ret

000012ae <_ZN4RF245writeEPKvhb>:
    12ae:	0f 93       	push	r16
    12b0:	cf 93       	push	r28
    12b2:	df 93       	push	r29
    12b4:	ec 01       	movw	r28, r24
    12b6:	01 e0       	ldi	r16, 0x01	; 1
    12b8:	0e 94 3e 09 	call	0x127c	; 0x127c <_ZN4RF2414startFastWriteEPKvhbb>
    12bc:	ce 01       	movw	r24, r28
    12be:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN4RF2410get_statusEv>
    12c2:	80 73       	andi	r24, 0x30	; 48
    12c4:	d9 f3       	breq	.-10     	; 0x12bc <_ZN4RF245writeEPKvhb+0xe>
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	ce 01       	movw	r24, r28
    12ca:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4RF242ceEb>
    12ce:	40 e7       	ldi	r20, 0x70	; 112
    12d0:	67 e0       	ldi	r22, 0x07	; 7
    12d2:	ce 01       	movw	r24, r28
    12d4:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    12d8:	84 ff       	sbrs	r24, 4
    12da:	05 c0       	rjmp	.+10     	; 0x12e6 <_ZN4RF245writeEPKvhb+0x38>
    12dc:	ce 01       	movw	r24, r28
    12de:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN4RF248flush_txEv>
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <_ZN4RF245writeEPKvhb+0x3a>
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	0f 91       	pop	r16
    12ee:	08 95       	ret

000012f0 <_ZN4RF245writeEPKvh>:
    12f0:	20 e0       	ldi	r18, 0x00	; 0
    12f2:	0c 94 57 09 	jmp	0x12ae	; 0x12ae <_ZN4RF245writeEPKvhb>

000012f6 <_ZN4RF249availableEPh>:
    12f6:	0f 93       	push	r16
    12f8:	1f 93       	push	r17
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	8c 01       	movw	r16, r24
    1300:	eb 01       	movw	r28, r22
    1302:	67 e1       	ldi	r22, 0x17	; 23
    1304:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    1308:	80 fd       	sbrc	r24, 0
    130a:	0b c0       	rjmp	.+22     	; 0x1322 <_ZN4RF249availableEPh+0x2c>
    130c:	20 97       	sbiw	r28, 0x00	; 0
    130e:	59 f0       	breq	.+22     	; 0x1326 <_ZN4RF249availableEPh+0x30>
    1310:	c8 01       	movw	r24, r16
    1312:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <_ZN4RF2410get_statusEv>
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	95 95       	asr	r25
    131a:	87 95       	ror	r24
    131c:	87 70       	andi	r24, 0x07	; 7
    131e:	88 83       	st	Y, r24
    1320:	02 c0       	rjmp	.+4      	; 0x1326 <_ZN4RF249availableEPh+0x30>
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <_ZN4RF249availableEPh+0x32>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	df 91       	pop	r29
    132a:	cf 91       	pop	r28
    132c:	1f 91       	pop	r17
    132e:	0f 91       	pop	r16
    1330:	08 95       	ret

00001332 <_ZN4RF249availableEv>:
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <_ZN4RF249availableEPh>

0000133a <_ZN4RF244readEPvh>:
    133a:	cf 93       	push	r28
    133c:	df 93       	push	r29
    133e:	ec 01       	movw	r28, r24
    1340:	0e 94 76 08 	call	0x10ec	; 0x10ec <_ZN4RF2412read_payloadEPvh>
    1344:	40 e7       	ldi	r20, 0x70	; 112
    1346:	67 e0       	ldi	r22, 0x07	; 7
    1348:	ce 01       	movw	r24, r28
    134a:	df 91       	pop	r29
    134c:	cf 91       	pop	r28
    134e:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

00001352 <_ZN4RF2415openWritingPipeEPKh>:
    1352:	0f 93       	push	r16
    1354:	1f 93       	push	r17
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
    135a:	ec 01       	movw	r28, r24
    135c:	8b 01       	movw	r16, r22
    135e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1360:	ab 01       	movw	r20, r22
    1362:	6a e0       	ldi	r22, 0x0A	; 10
    1364:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN4RF2414write_registerEhPKhh>
    1368:	2e 85       	ldd	r18, Y+14	; 0x0e
    136a:	a8 01       	movw	r20, r16
    136c:	60 e1       	ldi	r22, 0x10	; 16
    136e:	ce 01       	movw	r24, r28
    1370:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN4RF2414write_registerEhPKhh>
    1374:	4f 81       	ldd	r20, Y+7	; 0x07
    1376:	61 e1       	ldi	r22, 0x11	; 17
    1378:	ce 01       	movw	r24, r28
    137a:	df 91       	pop	r29
    137c:	cf 91       	pop	r28
    137e:	1f 91       	pop	r17
    1380:	0f 91       	pop	r16
    1382:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

00001386 <_ZN4RF2415openReadingPipeEhPKh>:
    1386:	ef 92       	push	r14
    1388:	ff 92       	push	r15
    138a:	0f 93       	push	r16
    138c:	1f 93       	push	r17
    138e:	cf 93       	push	r28
    1390:	df 93       	push	r29
    1392:	8c 01       	movw	r16, r24
    1394:	c6 2f       	mov	r28, r22
    1396:	7a 01       	movw	r14, r20
    1398:	61 11       	cpse	r22, r1
    139a:	08 c0       	rjmp	.+16     	; 0x13ac <_ZN4RF2415openReadingPipeEhPKh+0x26>
    139c:	fc 01       	movw	r30, r24
    139e:	46 85       	ldd	r20, Z+14	; 0x0e
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	b7 01       	movw	r22, r14
    13a4:	09 96       	adiw	r24, 0x09	; 9
    13a6:	0e 94 d0 11 	call	0x23a0	; 0x23a0 <memcpy>
    13aa:	05 c0       	rjmp	.+10     	; 0x13b6 <_ZN4RF2415openReadingPipeEhPKh+0x30>
    13ac:	67 30       	cpi	r22, 0x07	; 7
    13ae:	08 f0       	brcs	.+2      	; 0x13b2 <_ZN4RF2415openReadingPipeEhPKh+0x2c>
    13b0:	37 c0       	rjmp	.+110    	; 0x1420 <_ZN4RF2415openReadingPipeEhPKh+0x9a>
    13b2:	61 30       	cpi	r22, 0x01	; 1
    13b4:	41 f4       	brne	.+16     	; 0x13c6 <_ZN4RF2415openReadingPipeEhPKh+0x40>
    13b6:	ec 2f       	mov	r30, r28
    13b8:	f0 e0       	ldi	r31, 0x00	; 0
    13ba:	ed 5f       	subi	r30, 0xFD	; 253
    13bc:	fe 4f       	sbci	r31, 0xFE	; 254
    13be:	64 91       	lpm	r22, Z
    13c0:	f8 01       	movw	r30, r16
    13c2:	26 85       	ldd	r18, Z+14	; 0x0e
    13c4:	06 c0       	rjmp	.+12     	; 0x13d2 <_ZN4RF2415openReadingPipeEhPKh+0x4c>
    13c6:	e6 2f       	mov	r30, r22
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	ed 5f       	subi	r30, 0xFD	; 253
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	64 91       	lpm	r22, Z
    13d0:	21 e0       	ldi	r18, 0x01	; 1
    13d2:	a7 01       	movw	r20, r14
    13d4:	c8 01       	movw	r24, r16
    13d6:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN4RF2414write_registerEhPKhh>
    13da:	d0 e0       	ldi	r29, 0x00	; 0
    13dc:	fe 01       	movw	r30, r28
    13de:	e3 50       	subi	r30, 0x03	; 3
    13e0:	ff 4f       	sbci	r31, 0xFF	; 255
    13e2:	64 91       	lpm	r22, Z
    13e4:	f8 01       	movw	r30, r16
    13e6:	47 81       	ldd	r20, Z+7	; 0x07
    13e8:	c8 01       	movw	r24, r16
    13ea:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	c8 01       	movw	r24, r16
    13f2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    13f6:	fe 01       	movw	r30, r28
    13f8:	e7 5f       	subi	r30, 0xF7	; 247
    13fa:	fe 4f       	sbci	r31, 0xFE	; 254
    13fc:	e4 91       	lpm	r30, Z
    13fe:	41 e0       	ldi	r20, 0x01	; 1
    1400:	50 e0       	ldi	r21, 0x00	; 0
    1402:	01 c0       	rjmp	.+2      	; 0x1406 <_ZN4RF2415openReadingPipeEhPKh+0x80>
    1404:	44 0f       	add	r20, r20
    1406:	ea 95       	dec	r30
    1408:	ea f7       	brpl	.-6      	; 0x1404 <_ZN4RF2415openReadingPipeEhPKh+0x7e>
    140a:	48 2b       	or	r20, r24
    140c:	62 e0       	ldi	r22, 0x02	; 2
    140e:	c8 01       	movw	r24, r16
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	08 95       	ret

0000142e <_ZN4RF2416closeReadingPipeEh>:
    142e:	0f 93       	push	r16
    1430:	1f 93       	push	r17
    1432:	cf 93       	push	r28
    1434:	8c 01       	movw	r16, r24
    1436:	c6 2f       	mov	r28, r22
    1438:	62 e0       	ldi	r22, 0x02	; 2
    143a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    143e:	ec 2f       	mov	r30, r28
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	e7 5f       	subi	r30, 0xF7	; 247
    1444:	fe 4f       	sbci	r31, 0xFE	; 254
    1446:	e4 91       	lpm	r30, Z
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <_ZN4RF2416closeReadingPipeEh+0x22>
    144e:	22 0f       	add	r18, r18
    1450:	ea 95       	dec	r30
    1452:	ea f7       	brpl	.-6      	; 0x144e <_ZN4RF2416closeReadingPipeEh+0x20>
    1454:	20 95       	com	r18
    1456:	42 2f       	mov	r20, r18
    1458:	48 23       	and	r20, r24
    145a:	62 e0       	ldi	r22, 0x02	; 2
    145c:	c8 01       	movw	r24, r16
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0f 91       	pop	r16
    1464:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

00001468 <_ZN4RF2414startListeningEv>:
    1468:	cf 93       	push	r28
    146a:	df 93       	push	r29
    146c:	ec 01       	movw	r28, r24
    146e:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN4RF247powerUpEv>
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	ce 01       	movw	r24, r28
    1476:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    147a:	48 2f       	mov	r20, r24
    147c:	41 60       	ori	r20, 0x01	; 1
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	ce 01       	movw	r24, r28
    1482:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    1486:	40 e7       	ldi	r20, 0x70	; 112
    1488:	67 e0       	ldi	r22, 0x07	; 7
    148a:	ce 01       	movw	r24, r28
    148c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
    1490:	61 e0       	ldi	r22, 0x01	; 1
    1492:	ce 01       	movw	r24, r28
    1494:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4RF242ceEb>
    1498:	89 85       	ldd	r24, Y+9	; 0x09
    149a:	88 23       	and	r24, r24
    149c:	49 f0       	breq	.+18     	; 0x14b0 <_ZN4RF2414startListeningEv+0x48>
    149e:	2e 85       	ldd	r18, Y+14	; 0x0e
    14a0:	ae 01       	movw	r20, r28
    14a2:	47 5f       	subi	r20, 0xF7	; 247
    14a4:	5f 4f       	sbci	r21, 0xFF	; 255
    14a6:	6a e0       	ldi	r22, 0x0A	; 10
    14a8:	ce 01       	movw	r24, r28
    14aa:	0e 94 ef 07 	call	0xfde	; 0xfde <_ZN4RF2414write_registerEhPKhh>
    14ae:	04 c0       	rjmp	.+8      	; 0x14b8 <_ZN4RF2414startListeningEv+0x50>
    14b0:	60 e0       	ldi	r22, 0x00	; 0
    14b2:	ce 01       	movw	r24, r28
    14b4:	0e 94 17 0a 	call	0x142e	; 0x142e <_ZN4RF2416closeReadingPipeEh>
    14b8:	6d e1       	ldi	r22, 0x1D	; 29
    14ba:	ce 01       	movw	r24, r28
    14bc:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    14c0:	81 ff       	sbrs	r24, 1
    14c2:	05 c0       	rjmp	.+10     	; 0x14ce <_ZN4RF2414startListeningEv+0x66>
    14c4:	ce 01       	movw	r24, r28
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	0c 94 cd 08 	jmp	0x119a	; 0x119a <_ZN4RF248flush_txEv>
    14ce:	df 91       	pop	r29
    14d0:	cf 91       	pop	r28
    14d2:	08 95       	ret

000014d4 <_ZN4RF2415toggle_featuresEv>:
    14d4:	cf 93       	push	r28
    14d6:	df 93       	push	r29
    14d8:	ec 01       	movw	r28, r24
    14da:	0e 94 d2 07 	call	0xfa4	; 0xfa4 <_ZN4RF2416beginTransactionEv>
    14de:	80 e5       	ldi	r24, 0x50	; 80
    14e0:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    14e4:	83 e7       	ldi	r24, 0x73	; 115
    14e6:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    14ea:	ce 01       	movw	r24, r28
    14ec:	df 91       	pop	r29
    14ee:	cf 91       	pop	r28
    14f0:	0c 94 d5 07 	jmp	0xfaa	; 0xfaa <_ZN4RF2414endTransactionEv>

000014f4 <_ZN4RF2410setPALevelEh>:
    14f4:	0f 93       	push	r16
    14f6:	1f 93       	push	r17
    14f8:	cf 93       	push	r28
    14fa:	8c 01       	movw	r16, r24
    14fc:	c6 2f       	mov	r28, r22
    14fe:	66 e0       	ldi	r22, 0x06	; 6
    1500:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    1504:	88 7f       	andi	r24, 0xF8	; 248
    1506:	c4 30       	cpi	r28, 0x04	; 4
    1508:	18 f4       	brcc	.+6      	; 0x1510 <_ZN4RF2410setPALevelEh+0x1c>
    150a:	cc 0f       	add	r28, r28
    150c:	cf 5f       	subi	r28, 0xFF	; 255
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <_ZN4RF2410setPALevelEh+0x1e>
    1510:	c7 e0       	ldi	r28, 0x07	; 7
    1512:	4c 2f       	mov	r20, r28
    1514:	48 2b       	or	r20, r24
    1516:	66 e0       	ldi	r22, 0x06	; 6
    1518:	c8 01       	movw	r24, r16
    151a:	cf 91       	pop	r28
    151c:	1f 91       	pop	r17
    151e:	0f 91       	pop	r16
    1520:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

00001524 <_ZN4RF2411setDataRateE15rf24_datarate_e>:

/****************************************************************************/

bool RF24::setDataRate(rf24_datarate_e speed)
{
    1524:	0f 93       	push	r16
    1526:	1f 93       	push	r17
    1528:	cf 93       	push	r28
    152a:	df 93       	push	r29
    152c:	8c 01       	movw	r16, r24
    152e:	d6 2f       	mov	r29, r22
  bool result = false;
  uint8_t setup = read_register(RF_SETUP) ;
    1530:	66 e0       	ldi	r22, 0x06	; 6
    1532:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>

  // HIGH and LOW '00' is 1Mbs - our default
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
    1536:	c8 2f       	mov	r28, r24
    1538:	c7 7d       	andi	r28, 0xD7	; 215
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
  #endif
  if( speed == RF24_250KBPS )
    153a:	d2 30       	cpi	r29, 0x02	; 2
    153c:	31 f4       	brne	.+12     	; 0x154a <_ZN4RF2411setDataRateE15rf24_datarate_e+0x26>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    setup |= _BV( RF_DR_LOW ) ;
    153e:	c0 62       	ori	r28, 0x20	; 32
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=450;
  #else //16Mhz Arduino
	txDelay=155;
    1540:	8b e9       	ldi	r24, 0x9B	; 155
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	0c c0       	rjmp	.+24     	; 0x1562 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3e>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    154a:	d1 30       	cpi	r29, 0x01	; 1
    154c:	29 f0       	breq	.+10     	; 0x1558 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x34>
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
  
  #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
    txDelay=250;
  #else //16Mhz Arduino
    txDelay=85;
    154e:	85 e5       	ldi	r24, 0x55	; 85
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	a0 e0       	ldi	r26, 0x00	; 0
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <_ZN4RF2411setDataRateE15rf24_datarate_e+0x3e>
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
    {
      setup |= _BV(RF_DR_HIGH);
    1558:	c8 60       	ori	r28, 0x08	; 8
      #if defined(__arm__) || defined (RF24_LINUX) || defined (__ARDUINO_X86__)
      txDelay=190;
      #else //16Mhz Arduino	  
	  txDelay=65;
    155a:	81 e4       	ldi	r24, 0x41	; 65
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	a0 e0       	ldi	r26, 0x00	; 0
    1560:	b0 e0       	ldi	r27, 0x00	; 0
    1562:	f8 01       	movw	r30, r16
    1564:	80 8b       	std	Z+16, r24	; 0x10
    1566:	91 8b       	std	Z+17, r25	; 0x11
    1568:	a2 8b       	std	Z+18, r26	; 0x12
    156a:	b3 8b       	std	Z+19, r27	; 0x13
	  #endif
    }
  }
  write_register(RF_SETUP,setup);
    156c:	4c 2f       	mov	r20, r28
    156e:	66 e0       	ldi	r22, 0x06	; 6
    1570:	c8 01       	movw	r24, r16
    1572:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

  // Verify our result
  if ( read_register(RF_SETUP) == setup )
    1576:	66 e0       	ldi	r22, 0x06	; 6
    1578:	c8 01       	movw	r24, r16
    157a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
  {
    result = true;
  }
  return result;
    157e:	91 e0       	ldi	r25, 0x01	; 1
    1580:	c8 13       	cpse	r28, r24
    1582:	90 e0       	ldi	r25, 0x00	; 0
}
    1584:	89 2f       	mov	r24, r25
    1586:	df 91       	pop	r29
    1588:	cf 91       	pop	r28
    158a:	1f 91       	pop	r17
    158c:	0f 91       	pop	r16
    158e:	08 95       	ret

00001590 <_ZN4RF245beginEv>:

#endif
/****************************************************************************/

bool RF24::begin(void)
{
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	ec 01       	movw	r28, r24
	ce(LOW);
	csn(HIGH);
	delay(200);
  #else
    // Initialize pins
    if (ce_pin != csn_pin) pinMode(ce_pin,OUTPUT);  
    1598:	88 81       	ld	r24, Y
    159a:	99 81       	ldd	r25, Y+1	; 0x01
    159c:	2a 81       	ldd	r18, Y+2	; 0x02
    159e:	3b 81       	ldd	r19, Y+3	; 0x03
    15a0:	82 17       	cp	r24, r18
    15a2:	93 07       	cpc	r25, r19
    15a4:	19 f0       	breq	.+6      	; 0x15ac <_ZN4RF245beginEv+0x1c>
    15a6:	61 e0       	ldi	r22, 0x01	; 1
    15a8:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
  
    #if ! defined(LITTLEWIRE)
      if (ce_pin != csn_pin)
    15ac:	8a 81       	ldd	r24, Y+2	; 0x02
    15ae:	9b 81       	ldd	r25, Y+3	; 0x03
    15b0:	28 81       	ld	r18, Y
    15b2:	39 81       	ldd	r19, Y+1	; 0x01
    15b4:	28 17       	cp	r18, r24
    15b6:	39 07       	cpc	r19, r25
    15b8:	19 f0       	breq	.+6      	; 0x15c0 <_ZN4RF245beginEv+0x30>
    #endif
        pinMode(csn_pin,OUTPUT);
    15ba:	61 e0       	ldi	r22, 0x01	; 1
    15bc:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    
    _SPI.begin();
    15c0:	0e 94 71 11 	call	0x22e2	; 0x22e2 <_ZN8SPIClass5beginEv>
    ce(LOW);
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	ce 01       	movw	r24, r28
    15c8:	0e 94 c6 07 	call	0xf8c	; 0xf8c <_ZN4RF242ceEb>
  	csn(HIGH);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	ce 01       	movw	r24, r28
    15d0:	0e 94 ae 07 	call	0xf5c	; 0xf5c <_ZN4RF243csnEb>
  // This is actually only required following power up but some settling time also appears to
  // be required after resets too. For full coverage, we'll always assume the worst.
  // Enabling 16b CRC is by far the most obvious case if the wrong timing is used - or skipped.
  // Technically we require 4.5ms + 14us as a worst case. We'll just call it 5ms for good measure.
  // WARNING: Delay is based on P-variant whereby non-P *may* require different timing.
  delay( 5 ) ;
    15d4:	65 e0       	ldi	r22, 0x05	; 5
    15d6:	70 e0       	ldi	r23, 0x00	; 0
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay>

  // Reset NRF_CONFIG and enable 16-bit CRC.
  write_register( NRF_CONFIG, 0x0C ) ;
    15e0:	4c e0       	ldi	r20, 0x0C	; 12
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	ce 01       	movw	r24, r28
    15e6:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
}

/****************************************************************************/
void RF24::setRetries(uint8_t delay, uint8_t count)
{
 write_register(SETUP_RETR,(delay&0xf)<<ARD | (count&0xf)<<ARC);
    15ea:	4f e5       	ldi	r20, 0x5F	; 95
    15ec:	64 e0       	ldi	r22, 0x04	; 4
    15ee:	ce 01       	movw	r24, r28
    15f0:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
  // Reset value is MAX
  //setPALevel( RF24_PA_MAX ) ;

  // check for connected module and if this is a p nRF24l01 variant
  //
  if( setDataRate( RF24_250KBPS ) )
    15f4:	62 e0       	ldi	r22, 0x02	; 2
    15f6:	ce 01       	movw	r24, r28
    15f8:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN4RF2411setDataRateE15rf24_datarate_e>
    15fc:	88 23       	and	r24, r24
    15fe:	11 f0       	breq	.+4      	; 0x1604 <_ZN4RF245beginEv+0x74>
  {
    p_variant = true ;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	8e 83       	std	Y+6, r24	; 0x06
  }
  setup = read_register(RF_SETUP);
    1604:	66 e0       	ldi	r22, 0x06	; 6
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    160c:	18 2f       	mov	r17, r24
    p_variant = true ;
  }*/
  
  // Then set the data rate to the slowest (and most reliable) speed supported by all
  // hardware.
  setDataRate( RF24_1MBPS ) ;
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	0e 94 92 0a 	call	0x1524	; 0x1524 <_ZN4RF2411setDataRateE15rf24_datarate_e>

  // Initialize CRC and request 2-byte (16bit) CRC
  //setCRCLength( RF24_CRC_16 ) ;

  // Disable dynamic payloads, to match dynamic_payloads_enabled setting - Reset value is 0
  toggle_features();
    1616:	ce 01       	movw	r24, r28
    1618:	0e 94 6a 0a 	call	0x14d4	; 0x14d4 <_ZN4RF2415toggle_featuresEv>
  write_register(FEATURE,0 );
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	6d e1       	ldi	r22, 0x1D	; 29
    1620:	ce 01       	movw	r24, r28
    1622:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
  write_register(DYNPD,0);
    1626:	40 e0       	ldi	r20, 0x00	; 0
    1628:	6c e1       	ldi	r22, 0x1C	; 28
    162a:	ce 01       	movw	r24, r28
    162c:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>
  dynamic_payloads_enabled = false;
    1630:	18 86       	std	Y+8, r1	; 0x08

  // Reset current status
  // Notice reset and flush is the last thing we do
  write_register(NRF_STATUS,_BV(RX_DR) | _BV(TX_DS) | _BV(MAX_RT) );
    1632:	40 e7       	ldi	r20, 0x70	; 112
    1634:	67 e0       	ldi	r22, 0x07	; 7
    1636:	ce 01       	movw	r24, r28
    1638:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

  // Set up default configuration.  Callers can always change it later.
  // This channel should be universally safe and not bleed over into adjacent
  // spectrum.
  setChannel(76);
    163c:	6c e4       	ldi	r22, 0x4C	; 76
    163e:	ce 01       	movw	r24, r28
    1640:	0e 94 e8 08 	call	0x11d0	; 0x11d0 <_ZN4RF2410setChannelEh>

  // Flush buffers
  flush_rx();
    1644:	ce 01       	movw	r24, r28
    1646:	0e 94 ca 08 	call	0x1194	; 0x1194 <_ZN4RF248flush_rxEv>
  flush_tx();
    164a:	ce 01       	movw	r24, r28
    164c:	0e 94 cd 08 	call	0x119a	; 0x119a <_ZN4RF248flush_txEv>

  powerUp(); //Power up by default when begin() is called
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 25 09 	call	0x124a	; 0x124a <_ZN4RF247powerUpEv>

  // Enable PTX, do not write CE high so radio will remain in standby I mode ( 130us max to transition to RX or TX instead of 1500us from powerUp )
  // PTX should use only 22uA of power
  write_register(NRF_CONFIG, ( read_register(NRF_CONFIG) ) & ~_BV(PRIM_RX) );
    1656:	60 e0       	ldi	r22, 0x00	; 0
    1658:	ce 01       	movw	r24, r28
    165a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <_ZN4RF2413read_registerEh>
    165e:	48 2f       	mov	r20, r24
    1660:	4e 7f       	andi	r20, 0xFE	; 254
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	ce 01       	movw	r24, r28
    1666:	0e 94 1a 08 	call	0x1034	; 0x1034 <_ZN4RF2414write_registerEhh>

  // if setup is 0 or ff then there was no response from module
  return ( setup != 0 && setup != 0xff );
    166a:	11 50       	subi	r17, 0x01	; 1
    166c:	81 e0       	ldi	r24, 0x01	; 1
    166e:	1e 3f       	cpi	r17, 0xFE	; 254
    1670:	08 f0       	brcs	.+2      	; 0x1674 <_ZN4RF245beginEv+0xe4>
    1672:	80 e0       	ldi	r24, 0x00	; 0
}
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	1f 91       	pop	r17
    167a:	08 95       	ret

0000167c <_ZN7MFRC52219PICC_ReadCardSerialEv>:
	buffer[12] = buffer[14] = blockAddr;
	buffer[13] = buffer[15] = ~blockAddr;
	
	// Write the whole data block
	return MIFARE_Write(blockAddr, buffer, 16);
} // End MIFARE_SetValue()
    167c:	bc 01       	movw	r22, r24
    167e:	6e 5f       	subi	r22, 0xFE	; 254
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	dc 01       	movw	r26, r24
    1684:	ed 91       	ld	r30, X+
    1686:	fc 91       	ld	r31, X
    1688:	01 90       	ld	r0, Z+
    168a:	f0 81       	ld	r31, Z
    168c:	e0 2d       	mov	r30, r0
    168e:	40 e0       	ldi	r20, 0x00	; 0
    1690:	09 95       	icall
    1692:	91 e0       	ldi	r25, 0x01	; 1
    1694:	81 11       	cpse	r24, r1
    1696:	90 e0       	ldi	r25, 0x00	; 0
    1698:	89 2f       	mov	r24, r25
    169a:	08 95       	ret

0000169c <_ZN8SPIClass16beginTransactionE11SPISettings>:
    169c:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <_ZN8SPIClass13interruptModeE>
    16a0:	22 23       	and	r18, r18
    16a2:	99 f0       	breq	.+38     	; 0x16ca <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    16a4:	4f b7       	in	r20, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <_ZN8SPIClass13interruptModeE>
    16ac:	21 30       	cpi	r18, 0x01	; 1
    16ae:	59 f4       	brne	.+22     	; 0x16c6 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    16b0:	2d b3       	in	r18, 0x1d	; 29
    16b2:	20 93 8c 02 	sts	0x028C, r18	; 0x80028c <_ZN8SPIClass13interruptSaveE>
    16b6:	3d b3       	in	r19, 0x1d	; 29
    16b8:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <_ZN8SPIClass13interruptMaskE>
    16bc:	20 95       	com	r18
    16be:	23 23       	and	r18, r19
    16c0:	2d bb       	out	0x1d, r18	; 29
    16c2:	4f bf       	out	0x3f, r20	; 63
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    16c6:	40 93 8c 02 	sts	0x028C, r20	; 0x80028c <_ZN8SPIClass13interruptSaveE>
    16ca:	8c bd       	out	0x2c, r24	; 44
    16cc:	9d bd       	out	0x2d, r25	; 45
    16ce:	08 95       	ret

000016d0 <_ZN8SPIClass14endTransactionEv>:
    16d0:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <_ZN8SPIClass13interruptModeE>
    16d4:	88 23       	and	r24, r24
    16d6:	61 f0       	breq	.+24     	; 0x16f0 <_ZN8SPIClass14endTransactionEv+0x20>
    16d8:	9f b7       	in	r25, 0x3f	; 63
    16da:	f8 94       	cli
    16dc:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <_ZN8SPIClass13interruptModeE>
    16e0:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZN8SPIClass13interruptSaveE>
    16e4:	21 30       	cpi	r18, 0x01	; 1
    16e6:	19 f4       	brne	.+6      	; 0x16ee <_ZN8SPIClass14endTransactionEv+0x1e>
    16e8:	8d bb       	out	0x1d, r24	; 29
    16ea:	9f bf       	out	0x3f, r25	; 63
    16ec:	08 95       	ret
    16ee:	8f bf       	out	0x3f, r24	; 63
    16f0:	08 95       	ret

000016f2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>:
    16f2:	af 92       	push	r10
    16f4:	bf 92       	push	r11
    16f6:	cf 92       	push	r12
    16f8:	df 92       	push	r13
    16fa:	ef 92       	push	r14
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	6c 01       	movw	r12, r24
    1708:	a4 2e       	mov	r10, r20
    170a:	79 01       	movw	r14, r18
    170c:	60 68       	ori	r22, 0x80	; 128
    170e:	b6 2e       	mov	r11, r22
    1710:	fc 01       	movw	r30, r24
    1712:	82 89       	ldd	r24, Z+18	; 0x12
    1714:	93 89       	ldd	r25, Z+19	; 0x13
    1716:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN8SPIClass16beginTransactionE11SPISettings>
    171a:	60 e0       	ldi	r22, 0x00	; 0
    171c:	f6 01       	movw	r30, r12
    171e:	86 85       	ldd	r24, Z+14	; 0x0e
    1720:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1724:	aa 94       	dec	r10
    1726:	8b 2d       	mov	r24, r11
    1728:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    172c:	00 23       	and	r16, r16
    172e:	a1 f0       	breq	.+40     	; 0x1758 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x66>
    1730:	cf ef       	ldi	r28, 0xFF	; 255
    1732:	d0 e0       	ldi	r29, 0x00	; 0
    1734:	01 c0       	rjmp	.+2      	; 0x1738 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x46>
    1736:	cc 0f       	add	r28, r28
    1738:	0a 95       	dec	r16
    173a:	ea f7       	brpl	.-6      	; 0x1736 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x44>
    173c:	8b 2d       	mov	r24, r11
    173e:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1742:	2c 2f       	mov	r18, r28
    1744:	20 95       	com	r18
    1746:	f7 01       	movw	r30, r14
    1748:	90 81       	ld	r25, Z
    174a:	92 23       	and	r25, r18
    174c:	8c 23       	and	r24, r28
    174e:	89 2b       	or	r24, r25
    1750:	f7 01       	movw	r30, r14
    1752:	80 83       	st	Z, r24
    1754:	11 e0       	ldi	r17, 0x01	; 1
    1756:	01 c0       	rjmp	.+2      	; 0x175a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x68>
    1758:	10 e0       	ldi	r17, 0x00	; 0
    175a:	81 2f       	mov	r24, r17
    175c:	90 e0       	ldi	r25, 0x00	; 0
    175e:	e7 01       	movw	r28, r14
    1760:	c8 0f       	add	r28, r24
    1762:	d9 1f       	adc	r29, r25
    1764:	1a 15       	cp	r17, r10
    1766:	30 f4       	brcc	.+12     	; 0x1774 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x82>
    1768:	8b 2d       	mov	r24, r11
    176a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    176e:	88 83       	st	Y, r24
    1770:	1f 5f       	subi	r17, 0xFF	; 255
    1772:	f3 cf       	rjmp	.-26     	; 0x175a <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8+0x68>
    1774:	80 e0       	ldi	r24, 0x00	; 0
    1776:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    177a:	88 83       	st	Y, r24
    177c:	61 e0       	ldi	r22, 0x01	; 1
    177e:	f6 01       	movw	r30, r12
    1780:	86 85       	ldd	r24, Z+14	; 0x0e
    1782:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	bf 90       	pop	r11
    1798:	af 90       	pop	r10
    179a:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_ZN8SPIClass14endTransactionEv>

0000179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>:
    179e:	0f 93       	push	r16
    17a0:	1f 93       	push	r17
    17a2:	cf 93       	push	r28
    17a4:	df 93       	push	r29
    17a6:	ec 01       	movw	r28, r24
    17a8:	06 2f       	mov	r16, r22
    17aa:	14 2f       	mov	r17, r20
    17ac:	8a 89       	ldd	r24, Y+18	; 0x12
    17ae:	9b 89       	ldd	r25, Y+19	; 0x13
    17b0:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN8SPIClass16beginTransactionE11SPISettings>
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	8e 85       	ldd	r24, Y+14	; 0x0e
    17b8:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    17bc:	80 2f       	mov	r24, r16
    17be:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    17c2:	81 2f       	mov	r24, r17
    17c4:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    17c8:	61 e0       	ldi	r22, 0x01	; 1
    17ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    17cc:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    17d0:	df 91       	pop	r29
    17d2:	cf 91       	pop	r28
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_ZN8SPIClass14endTransactionEv>

000017dc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>:
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	8c 01       	movw	r16, r24
    17ec:	c6 2f       	mov	r28, r22
    17ee:	f4 2e       	mov	r15, r20
    17f0:	d2 2e       	mov	r13, r18
    17f2:	e3 2e       	mov	r14, r19
    17f4:	fc 01       	movw	r30, r24
    17f6:	82 89       	ldd	r24, Z+18	; 0x12
    17f8:	93 89       	ldd	r25, Z+19	; 0x13
    17fa:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN8SPIClass16beginTransactionE11SPISettings>
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	f8 01       	movw	r30, r16
    1802:	86 85       	ldd	r24, Z+14	; 0x0e
    1804:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1808:	8c 2f       	mov	r24, r28
    180a:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    180e:	cd 2d       	mov	r28, r13
    1810:	de 2d       	mov	r29, r14
    1812:	ce 01       	movw	r24, r28
    1814:	8f 0d       	add	r24, r15
    1816:	91 1d       	adc	r25, r1
    1818:	7c 01       	movw	r14, r24
    181a:	ce 15       	cp	r28, r14
    181c:	df 05       	cpc	r29, r15
    181e:	21 f0       	breq	.+8      	; 0x1828 <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x4c>
    1820:	89 91       	ld	r24, Y+
    1822:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1826:	f9 cf       	rjmp	.-14     	; 0x181a <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh+0x3e>
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	f8 01       	movw	r30, r16
    182c:	86 85       	ldd	r24, Z+14	; 0x0e
    182e:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1832:	df 91       	pop	r29
    1834:	cf 91       	pop	r28
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	0c 94 68 0b 	jmp	0x16d0	; 0x16d0 <_ZN8SPIClass14endTransactionEv>

00001844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>:
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
    184c:	16 2f       	mov	r17, r22
    184e:	8a 89       	ldd	r24, Y+18	; 0x12
    1850:	9b 89       	ldd	r25, Y+19	; 0x13
    1852:	0e 94 4e 0b 	call	0x169c	; 0x169c <_ZN8SPIClass16beginTransactionE11SPISettings>
    1856:	60 e0       	ldi	r22, 0x00	; 0
    1858:	8e 85       	ldd	r24, Y+14	; 0x0e
    185a:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    185e:	81 2f       	mov	r24, r17
    1860:	80 68       	ori	r24, 0x80	; 128
    1862:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	0e 94 a7 07 	call	0xf4e	; 0xf4e <_ZN8SPIClass8transferEh>
    186c:	18 2f       	mov	r17, r24
    186e:	61 e0       	ldi	r22, 0x01	; 1
    1870:	8e 85       	ldd	r24, Y+14	; 0x0e
    1872:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1876:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <_ZN8SPIClass14endTransactionEv>
    187a:	81 2f       	mov	r24, r17
    187c:	df 91       	pop	r29
    187e:	cf 91       	pop	r28
    1880:	1f 91       	pop	r17
    1882:	08 95       	ret

00001884 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>:
    1884:	0f 93       	push	r16
    1886:	41 11       	cpse	r20, r1
    1888:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh.part.1.constprop.8>
    188c:	0f 91       	pop	r16
    188e:	08 95       	ret

00001890 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>:
    1890:	0f 93       	push	r16
    1892:	1f 93       	push	r17
    1894:	cf 93       	push	r28
    1896:	df 93       	push	r29
    1898:	8c 01       	movw	r16, r24
    189a:	d6 2f       	mov	r29, r22
    189c:	c4 2f       	mov	r28, r20
    189e:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    18a2:	48 2f       	mov	r20, r24
    18a4:	4c 2b       	or	r20, r28
    18a6:	6d 2f       	mov	r22, r29
    18a8:	c8 01       	movw	r24, r16
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000018b6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>:
    18b6:	0f 93       	push	r16
    18b8:	1f 93       	push	r17
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	8c 01       	movw	r16, r24
    18c0:	d6 2f       	mov	r29, r22
    18c2:	c4 2f       	mov	r28, r20
    18c4:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    18c8:	c0 95       	com	r28
    18ca:	4c 2f       	mov	r20, r28
    18cc:	48 23       	and	r20, r24
    18ce:	6d 2f       	mov	r22, r29
    18d0:	c8 01       	movw	r24, r16
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>

000018de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>:
    18de:	cf 92       	push	r12
    18e0:	df 92       	push	r13
    18e2:	ef 92       	push	r14
    18e4:	ff 92       	push	r15
    18e6:	0f 93       	push	r16
    18e8:	1f 93       	push	r17
    18ea:	cf 93       	push	r28
    18ec:	df 93       	push	r29
    18ee:	ec 01       	movw	r28, r24
    18f0:	6b 01       	movw	r12, r22
    18f2:	14 2f       	mov	r17, r20
    18f4:	79 01       	movw	r14, r18
    18f6:	40 e0       	ldi	r20, 0x00	; 0
    18f8:	62 e0       	ldi	r22, 0x02	; 2
    18fa:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    18fe:	44 e0       	ldi	r20, 0x04	; 4
    1900:	6a e0       	ldi	r22, 0x0A	; 10
    1902:	ce 01       	movw	r24, r28
    1904:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1908:	40 e8       	ldi	r20, 0x80	; 128
    190a:	64 e1       	ldi	r22, 0x14	; 20
    190c:	ce 01       	movw	r24, r28
    190e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1912:	96 01       	movw	r18, r12
    1914:	41 2f       	mov	r20, r17
    1916:	62 e1       	ldi	r22, 0x12	; 18
    1918:	ce 01       	movw	r24, r28
    191a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    191e:	43 e0       	ldi	r20, 0x03	; 3
    1920:	62 e0       	ldi	r22, 0x02	; 2
    1922:	ce 01       	movw	r24, r28
    1924:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1928:	08 e8       	ldi	r16, 0x88	; 136
    192a:	13 e1       	ldi	r17, 0x13	; 19
    192c:	6a e0       	ldi	r22, 0x0A	; 10
    192e:	ce 01       	movw	r24, r28
    1930:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1934:	82 ff       	sbrs	r24, 2
    1936:	13 c0       	rjmp	.+38     	; 0x195e <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x80>
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	62 e0       	ldi	r22, 0x02	; 2
    193c:	ce 01       	movw	r24, r28
    193e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1942:	64 e4       	ldi	r22, 0x44	; 68
    1944:	ce 01       	movw	r24, r28
    1946:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    194a:	f7 01       	movw	r30, r14
    194c:	80 83       	st	Z, r24
    194e:	62 e4       	ldi	r22, 0x42	; 66
    1950:	ce 01       	movw	r24, r28
    1952:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1956:	f7 01       	movw	r30, r14
    1958:	81 83       	std	Z+1, r24	; 0x01
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x88>
    195e:	01 50       	subi	r16, 0x01	; 1
    1960:	11 09       	sbc	r17, r1
    1962:	21 f7       	brne	.-56     	; 0x192c <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_+0x4e>
    1964:	83 e0       	ldi	r24, 0x03	; 3
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	08 95       	ret

00001978 <_ZN7MFRC5229PCD_ResetEv>:
    1978:	0f 93       	push	r16
    197a:	1f 93       	push	r17
    197c:	cf 93       	push	r28
    197e:	8c 01       	movw	r16, r24
    1980:	4f e0       	ldi	r20, 0x0F	; 15
    1982:	62 e0       	ldi	r22, 0x02	; 2
    1984:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1988:	c3 e0       	ldi	r28, 0x03	; 3
    198a:	62 e3       	ldi	r22, 0x32	; 50
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	80 e0       	ldi	r24, 0x00	; 0
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay>
    1996:	62 e0       	ldi	r22, 0x02	; 2
    1998:	c8 01       	movw	r24, r16
    199a:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    199e:	84 ff       	sbrs	r24, 4
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <_ZN7MFRC5229PCD_ResetEv+0x2e>
    19a2:	c1 50       	subi	r28, 0x01	; 1
    19a4:	91 f7       	brne	.-28     	; 0x198a <_ZN7MFRC5229PCD_ResetEv+0x12>
    19a6:	cf 91       	pop	r28
    19a8:	1f 91       	pop	r17
    19aa:	0f 91       	pop	r16
    19ac:	08 95       	ret

000019ae <_ZN7MFRC52213PCD_AntennaOnEv>:
    19ae:	cf 93       	push	r28
    19b0:	df 93       	push	r29
    19b2:	ec 01       	movw	r28, r24
    19b4:	68 e2       	ldi	r22, 0x28	; 40
    19b6:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    19ba:	98 2f       	mov	r25, r24
    19bc:	93 70       	andi	r25, 0x03	; 3
    19be:	93 30       	cpi	r25, 0x03	; 3
    19c0:	41 f0       	breq	.+16     	; 0x19d2 <_ZN7MFRC52213PCD_AntennaOnEv+0x24>
    19c2:	48 2f       	mov	r20, r24
    19c4:	43 60       	ori	r20, 0x03	; 3
    19c6:	68 e2       	ldi	r22, 0x28	; 40
    19c8:	ce 01       	movw	r24, r28
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	0c 94 cf 0b 	jmp	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <_ZN7MFRC5228PCD_InitEv>:
    19d8:	cf 93       	push	r28
    19da:	df 93       	push	r29
    19dc:	ec 01       	movw	r28, r24
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    19e2:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    19e6:	61 e0       	ldi	r22, 0x01	; 1
    19e8:	8e 85       	ldd	r24, Y+14	; 0x0e
    19ea:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    19ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    19f0:	8f 3f       	cpi	r24, 0xFF	; 255
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <_ZN7MFRC5228PCD_InitEv+0x1e>
    19f4:	49 c0       	rjmp	.+146    	; 0x1a88 <_ZN7MFRC5228PCD_InitEv+0xb0>
    19f6:	60 e0       	ldi	r22, 0x00	; 0
    19f8:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    19fc:	8f 85       	ldd	r24, Y+15	; 0x0f
    19fe:	0e 94 7e 07 	call	0xefc	; 0xefc <digitalRead>
    1a02:	89 2b       	or	r24, r25
    1a04:	09 f0       	breq	.+2      	; 0x1a08 <_ZN7MFRC5228PCD_InitEv+0x30>
    1a06:	40 c0       	rjmp	.+128    	; 0x1a88 <_ZN7MFRC5228PCD_InitEv+0xb0>
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a0c:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    1a10:	61 e0       	ldi	r22, 0x01	; 1
    1a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a14:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    1a18:	62 e3       	ldi	r22, 0x32	; 50
    1a1a:	70 e0       	ldi	r23, 0x00	; 0
    1a1c:	80 e0       	ldi	r24, 0x00	; 0
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	0e 94 68 06 	call	0xcd0	; 0xcd0 <delay>
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	64 e2       	ldi	r22, 0x24	; 36
    1a28:	ce 01       	movw	r24, r28
    1a2a:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	66 e2       	ldi	r22, 0x26	; 38
    1a32:	ce 01       	movw	r24, r28
    1a34:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a38:	46 e2       	ldi	r20, 0x26	; 38
    1a3a:	68 e4       	ldi	r22, 0x48	; 72
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a42:	40 e8       	ldi	r20, 0x80	; 128
    1a44:	64 e5       	ldi	r22, 0x54	; 84
    1a46:	ce 01       	movw	r24, r28
    1a48:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a4c:	49 ea       	ldi	r20, 0xA9	; 169
    1a4e:	66 e5       	ldi	r22, 0x56	; 86
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a56:	43 e0       	ldi	r20, 0x03	; 3
    1a58:	68 e5       	ldi	r22, 0x58	; 88
    1a5a:	ce 01       	movw	r24, r28
    1a5c:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a60:	48 ee       	ldi	r20, 0xE8	; 232
    1a62:	6a e5       	ldi	r22, 0x5A	; 90
    1a64:	ce 01       	movw	r24, r28
    1a66:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a6a:	40 e4       	ldi	r20, 0x40	; 64
    1a6c:	6a e2       	ldi	r22, 0x2A	; 42
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a74:	4d e3       	ldi	r20, 0x3D	; 61
    1a76:	62 e2       	ldi	r22, 0x22	; 34
    1a78:	ce 01       	movw	r24, r28
    1a7a:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1a7e:	ce 01       	movw	r24, r28
    1a80:	df 91       	pop	r29
    1a82:	cf 91       	pop	r28
    1a84:	0c 94 d7 0c 	jmp	0x19ae	; 0x19ae <_ZN7MFRC52213PCD_AntennaOnEv>
    1a88:	ce 01       	movw	r24, r28
    1a8a:	0e 94 bc 0c 	call	0x1978	; 0x1978 <_ZN7MFRC5229PCD_ResetEv>
    1a8e:	ca cf       	rjmp	.-108    	; 0x1a24 <_ZN7MFRC5228PCD_InitEv+0x4c>

00001a90 <_ZN7MFRC52218PCD_GetAntennaGainEv>:
    1a90:	6c e4       	ldi	r22, 0x4C	; 76
    1a92:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1a96:	80 77       	andi	r24, 0x70	; 112
    1a98:	08 95       	ret

00001a9a <_ZN7MFRC52218PCD_SetAntennaGainEh>:
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	8c 01       	movw	r16, r24
    1aa2:	c6 2f       	mov	r28, r22
    1aa4:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <_ZN7MFRC52218PCD_GetAntennaGainEv>
    1aa8:	8c 17       	cp	r24, r28
    1aaa:	71 f0       	breq	.+28     	; 0x1ac8 <_ZN7MFRC52218PCD_SetAntennaGainEh+0x2e>
    1aac:	40 e7       	ldi	r20, 0x70	; 112
    1aae:	6c e4       	ldi	r22, 0x4C	; 76
    1ab0:	c8 01       	movw	r24, r16
    1ab2:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    1ab6:	4c 2f       	mov	r20, r28
    1ab8:	40 77       	andi	r20, 0x70	; 112
    1aba:	6c e4       	ldi	r22, 0x4C	; 76
    1abc:	c8 01       	movw	r24, r16
    1abe:	cf 91       	pop	r28
    1ac0:	1f 91       	pop	r17
    1ac2:	0f 91       	pop	r16
    1ac4:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>:
    1ad0:	3f 92       	push	r3
    1ad2:	4f 92       	push	r4
    1ad4:	5f 92       	push	r5
    1ad6:	6f 92       	push	r6
    1ad8:	7f 92       	push	r7
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	00 d0       	rcall	.+0      	; 0x1af4 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x24>
    1af4:	cd b7       	in	r28, 0x3d	; 61
    1af6:	de b7       	in	r29, 0x3e	; 62
    1af8:	3c 01       	movw	r6, r24
    1afa:	16 2f       	mov	r17, r22
    1afc:	94 2e       	mov	r9, r20
    1afe:	29 01       	movw	r4, r18
    1b00:	a1 14       	cp	r10, r1
    1b02:	b1 04       	cpc	r11, r1
    1b04:	19 f0       	breq	.+6      	; 0x1b0c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3c>
    1b06:	f5 01       	movw	r30, r10
    1b08:	40 81       	ld	r20, Z
    1b0a:	01 c0       	rjmp	.+2      	; 0x1b0e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x3e>
    1b0c:	40 e0       	ldi	r20, 0x00	; 0
    1b0e:	34 2e       	mov	r3, r20
    1b10:	f0 e1       	ldi	r31, 0x10	; 16
    1b12:	8f 9e       	mul	r8, r31
    1b14:	30 0c       	add	r3, r0
    1b16:	11 24       	eor	r1, r1
    1b18:	40 e0       	ldi	r20, 0x00	; 0
    1b1a:	62 e0       	ldi	r22, 0x02	; 2
    1b1c:	c3 01       	movw	r24, r6
    1b1e:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1b22:	4f e7       	ldi	r20, 0x7F	; 127
    1b24:	68 e0       	ldi	r22, 0x08	; 8
    1b26:	c3 01       	movw	r24, r6
    1b28:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	64 e1       	ldi	r22, 0x14	; 20
    1b30:	c3 01       	movw	r24, r6
    1b32:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1b36:	92 01       	movw	r18, r4
    1b38:	40 2f       	mov	r20, r16
    1b3a:	62 e1       	ldi	r22, 0x12	; 18
    1b3c:	c3 01       	movw	r24, r6
    1b3e:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEhPh>
    1b42:	43 2d       	mov	r20, r3
    1b44:	6a e1       	ldi	r22, 0x1A	; 26
    1b46:	c3 01       	movw	r24, r6
    1b48:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1b4c:	41 2f       	mov	r20, r17
    1b4e:	62 e0       	ldi	r22, 0x02	; 2
    1b50:	c3 01       	movw	r24, r6
    1b52:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1b56:	1c 30       	cpi	r17, 0x0C	; 12
    1b58:	29 f4       	brne	.+10     	; 0x1b64 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x94>
    1b5a:	40 e8       	ldi	r20, 0x80	; 128
    1b5c:	6a e1       	ldi	r22, 0x1A	; 26
    1b5e:	c3 01       	movw	r24, r6
    1b60:	0e 94 48 0c 	call	0x1890	; 0x1890 <_ZN7MFRC52222PCD_SetRegisterBitMaskENS_12PCD_RegisterEh>
    1b64:	00 ed       	ldi	r16, 0xD0	; 208
    1b66:	17 e0       	ldi	r17, 0x07	; 7
    1b68:	68 e0       	ldi	r22, 0x08	; 8
    1b6a:	c3 01       	movw	r24, r6
    1b6c:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1b70:	98 2f       	mov	r25, r24
    1b72:	99 21       	and	r25, r9
    1b74:	39 f4       	brne	.+14     	; 0x1b84 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb4>
    1b76:	80 fd       	sbrc	r24, 0
    1b78:	03 c0       	rjmp	.+6      	; 0x1b80 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xb0>
    1b7a:	01 50       	subi	r16, 0x01	; 1
    1b7c:	11 09       	sbc	r17, r1
    1b7e:	a1 f7       	brne	.-24     	; 0x1b68 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x98>
    1b80:	83 e0       	ldi	r24, 0x03	; 3
    1b82:	65 c0       	rjmp	.+202    	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1b84:	6c e0       	ldi	r22, 0x0C	; 12
    1b86:	c3 01       	movw	r24, r6
    1b88:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1b8c:	18 2f       	mov	r17, r24
    1b8e:	83 71       	andi	r24, 0x13	; 19
    1b90:	09 f0       	breq	.+2      	; 0x1b94 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xc4>
    1b92:	5a c0       	rjmp	.+180    	; 0x1c48 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x178>
    1b94:	e1 14       	cp	r14, r1
    1b96:	f1 04       	cpc	r15, r1
    1b98:	f9 f0       	breq	.+62     	; 0x1bd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    1b9a:	c1 14       	cp	r12, r1
    1b9c:	d1 04       	cpc	r13, r1
    1b9e:	e1 f0       	breq	.+56     	; 0x1bd8 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x108>
    1ba0:	64 e1       	ldi	r22, 0x14	; 20
    1ba2:	c3 01       	movw	r24, r6
    1ba4:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1ba8:	f6 01       	movw	r30, r12
    1baa:	90 81       	ld	r25, Z
    1bac:	98 17       	cp	r25, r24
    1bae:	08 f4       	brcc	.+2      	; 0x1bb2 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0xe2>
    1bb0:	45 c0       	rjmp	.+138    	; 0x1c3c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x16c>
    1bb2:	80 83       	st	Z, r24
    1bb4:	08 2d       	mov	r16, r8
    1bb6:	97 01       	movw	r18, r14
    1bb8:	48 2f       	mov	r20, r24
    1bba:	62 e1       	ldi	r22, 0x12	; 18
    1bbc:	c3 01       	movw	r24, r6
    1bbe:	0e 94 42 0c 	call	0x1884	; 0x1884 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterEhPhh>
    1bc2:	68 e1       	ldi	r22, 0x18	; 24
    1bc4:	c3 01       	movw	r24, r6
    1bc6:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1bca:	87 70       	andi	r24, 0x07	; 7
    1bcc:	a1 14       	cp	r10, r1
    1bce:	b1 04       	cpc	r11, r1
    1bd0:	21 f0       	breq	.+8      	; 0x1bda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    1bd2:	f5 01       	movw	r30, r10
    1bd4:	80 83       	st	Z, r24
    1bd6:	01 c0       	rjmp	.+2      	; 0x1bda <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x10a>
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
    1bda:	13 fd       	sbrc	r17, 3
    1bdc:	31 c0       	rjmp	.+98     	; 0x1c40 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x170>
    1bde:	e1 14       	cp	r14, r1
    1be0:	f1 04       	cpc	r15, r1
    1be2:	81 f1       	breq	.+96     	; 0x1c44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1be4:	c1 14       	cp	r12, r1
    1be6:	d1 04       	cpc	r13, r1
    1be8:	69 f1       	breq	.+90     	; 0x1c44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1bea:	9e 89       	ldd	r25, Y+22	; 0x16
    1bec:	99 23       	and	r25, r25
    1bee:	51 f1       	breq	.+84     	; 0x1c44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1bf0:	f6 01       	movw	r30, r12
    1bf2:	40 81       	ld	r20, Z
    1bf4:	41 30       	cpi	r20, 0x01	; 1
    1bf6:	21 f4       	brne	.+8      	; 0x1c00 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x130>
    1bf8:	84 30       	cpi	r24, 0x04	; 4
    1bfa:	41 f5       	brne	.+80     	; 0x1c4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	27 c0       	rjmp	.+78     	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c00:	42 30       	cpi	r20, 0x02	; 2
    1c02:	20 f1       	brcs	.+72     	; 0x1c4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1c04:	81 11       	cpse	r24, r1
    1c06:	22 c0       	rjmp	.+68     	; 0x1c4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1c08:	42 50       	subi	r20, 0x02	; 2
    1c0a:	9e 01       	movw	r18, r28
    1c0c:	2f 5f       	subi	r18, 0xFF	; 255
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	b7 01       	movw	r22, r14
    1c12:	c3 01       	movw	r24, r6
    1c14:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1c18:	81 11       	cpse	r24, r1
    1c1a:	19 c0       	rjmp	.+50     	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c1c:	f6 01       	movw	r30, r12
    1c1e:	80 81       	ld	r24, Z
    1c20:	e8 0e       	add	r14, r24
    1c22:	f1 1c       	adc	r15, r1
    1c24:	f7 01       	movw	r30, r14
    1c26:	32 97       	sbiw	r30, 0x02	; 2
    1c28:	90 81       	ld	r25, Z
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	98 13       	cpse	r25, r24
    1c2e:	0e c0       	rjmp	.+28     	; 0x1c4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1c30:	31 96       	adiw	r30, 0x01	; 1
    1c32:	90 81       	ld	r25, Z
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	98 13       	cpse	r25, r24
    1c38:	09 c0       	rjmp	.+18     	; 0x1c4c <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17c>
    1c3a:	04 c0       	rjmp	.+8      	; 0x1c44 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x174>
    1c3c:	84 e0       	ldi	r24, 0x04	; 4
    1c3e:	07 c0       	rjmp	.+14     	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c40:	82 e0       	ldi	r24, 0x02	; 2
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	03 c0       	rjmp	.+6      	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	01 c0       	rjmp	.+2      	; 0x1c4e <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb+0x17e>
    1c4c:	87 e0       	ldi	r24, 0x07	; 7
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	1f 91       	pop	r17
    1c58:	0f 91       	pop	r16
    1c5a:	ff 90       	pop	r15
    1c5c:	ef 90       	pop	r14
    1c5e:	df 90       	pop	r13
    1c60:	cf 90       	pop	r12
    1c62:	bf 90       	pop	r11
    1c64:	af 90       	pop	r10
    1c66:	9f 90       	pop	r9
    1c68:	8f 90       	pop	r8
    1c6a:	7f 90       	pop	r7
    1c6c:	6f 90       	pop	r6
    1c6e:	5f 90       	pop	r5
    1c70:	4f 90       	pop	r4
    1c72:	3f 90       	pop	r3
    1c74:	08 95       	ret

00001c76 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>:
    1c76:	8f 92       	push	r8
    1c78:	af 92       	push	r10
    1c7a:	bf 92       	push	r11
    1c7c:	cf 92       	push	r12
    1c7e:	df 92       	push	r13
    1c80:	ef 92       	push	r14
    1c82:	ff 92       	push	r15
    1c84:	0f 93       	push	r16
    1c86:	1f 93       	push	r17
    1c88:	af 92       	push	r10
    1c8a:	8c 2c       	mov	r8, r12
    1c8c:	57 01       	movw	r10, r14
    1c8e:	68 01       	movw	r12, r16
    1c90:	79 01       	movw	r14, r18
    1c92:	04 2f       	mov	r16, r20
    1c94:	9b 01       	movw	r18, r22
    1c96:	40 e3       	ldi	r20, 0x30	; 48
    1c98:	6c e0       	ldi	r22, 0x0C	; 12
    1c9a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    1c9e:	0f 90       	pop	r0
    1ca0:	1f 91       	pop	r17
    1ca2:	0f 91       	pop	r16
    1ca4:	ff 90       	pop	r15
    1ca6:	ef 90       	pop	r14
    1ca8:	df 90       	pop	r13
    1caa:	cf 90       	pop	r12
    1cac:	bf 90       	pop	r11
    1cae:	af 90       	pop	r10
    1cb0:	8f 90       	pop	r8
    1cb2:	08 95       	ret

00001cb4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh>:
    1cb4:	2f 92       	push	r2
    1cb6:	3f 92       	push	r3
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	2c 97       	sbiw	r28, 0x0c	; 12
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	f8 94       	cli
    1ce2:	de bf       	out	0x3e, r29	; 62
    1ce4:	0f be       	out	0x3f, r0	; 63
    1ce6:	cd bf       	out	0x3d, r28	; 61
    1ce8:	41 35       	cpi	r20, 0x51	; 81
    1cea:	08 f0       	brcs	.+2      	; 0x1cee <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x3a>
    1cec:	04 c1       	rjmp	.+520    	; 0x1ef6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x242>
    1cee:	34 2e       	mov	r3, r20
    1cf0:	3b 01       	movw	r6, r22
    1cf2:	4c 01       	movw	r8, r24
    1cf4:	40 e8       	ldi	r20, 0x80	; 128
    1cf6:	6c e1       	ldi	r22, 0x1C	; 28
    1cf8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    1cfc:	22 24       	eor	r2, r2
    1cfe:	23 94       	inc	r2
    1d00:	32 e0       	ldi	r19, 0x02	; 2
    1d02:	23 16       	cp	r2, r19
    1d04:	91 f0       	breq	.+36     	; 0x1d2a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x76>
    1d06:	83 e0       	ldi	r24, 0x03	; 3
    1d08:	28 16       	cp	r2, r24
    1d0a:	e1 f0       	breq	.+56     	; 0x1d44 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x90>
    1d0c:	91 e0       	ldi	r25, 0x01	; 1
    1d0e:	29 12       	cpse	r2, r25
    1d10:	f6 c0       	rjmp	.+492    	; 0x1efe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24a>
    1d12:	83 e9       	ldi	r24, 0x93	; 147
    1d14:	89 83       	std	Y+1, r24	; 0x01
    1d16:	33 20       	and	r3, r3
    1d18:	d1 f0       	breq	.+52     	; 0x1d4e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9a>
    1d1a:	81 e0       	ldi	r24, 0x01	; 1
    1d1c:	f3 01       	movw	r30, r6
    1d1e:	90 81       	ld	r25, Z
    1d20:	95 30       	cpi	r25, 0x05	; 5
    1d22:	08 f4       	brcc	.+2      	; 0x1d26 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x72>
    1d24:	80 e0       	ldi	r24, 0x00	; 0
    1d26:	d1 2c       	mov	r13, r1
    1d28:	17 c0       	rjmp	.+46     	; 0x1d58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    1d2a:	f5 e9       	ldi	r31, 0x95	; 149
    1d2c:	f9 83       	std	Y+1, r31	; 0x01
    1d2e:	33 20       	and	r3, r3
    1d30:	81 f0       	breq	.+32     	; 0x1d52 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x9e>
    1d32:	81 e0       	ldi	r24, 0x01	; 1
    1d34:	f3 01       	movw	r30, r6
    1d36:	90 81       	ld	r25, Z
    1d38:	98 30       	cpi	r25, 0x08	; 8
    1d3a:	08 f4       	brcc	.+2      	; 0x1d3e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x8a>
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	73 e0       	ldi	r23, 0x03	; 3
    1d40:	d7 2e       	mov	r13, r23
    1d42:	0a c0       	rjmp	.+20     	; 0x1d58 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa4>
    1d44:	87 e9       	ldi	r24, 0x97	; 151
    1d46:	89 83       	std	Y+1, r24	; 0x01
    1d48:	66 e0       	ldi	r22, 0x06	; 6
    1d4a:	d6 2e       	mov	r13, r22
    1d4c:	04 c0       	rjmp	.+8      	; 0x1d56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    1d4e:	d1 2c       	mov	r13, r1
    1d50:	02 c0       	rjmp	.+4      	; 0x1d56 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xa2>
    1d52:	53 e0       	ldi	r21, 0x03	; 3
    1d54:	d5 2e       	mov	r13, r21
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	b3 2c       	mov	r11, r3
    1d5a:	f8 e0       	ldi	r31, 0x08	; 8
    1d5c:	df 9e       	mul	r13, r31
    1d5e:	b0 18       	sub	r11, r0
    1d60:	11 24       	eor	r1, r1
    1d62:	b7 fc       	sbrc	r11, 7
    1d64:	b1 2c       	mov	r11, r1
    1d66:	88 23       	and	r24, r24
    1d68:	21 f0       	breq	.+8      	; 0x1d72 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xbe>
    1d6a:	98 e8       	ldi	r25, 0x88	; 136
    1d6c:	9b 83       	std	Y+3, r25	; 0x03
    1d6e:	33 e0       	ldi	r19, 0x03	; 3
    1d70:	01 c0       	rjmp	.+2      	; 0x1d74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xc0>
    1d72:	32 e0       	ldi	r19, 0x02	; 2
    1d74:	21 e0       	ldi	r18, 0x01	; 1
    1d76:	9b 2d       	mov	r25, r11
    1d78:	97 70       	andi	r25, 0x07	; 7
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xca>
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	9b 2d       	mov	r25, r11
    1d80:	95 95       	asr	r25
    1d82:	95 95       	asr	r25
    1d84:	95 95       	asr	r25
    1d86:	29 0f       	add	r18, r25
    1d88:	31 f4       	brne	.+12     	; 0x1d96 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xe2>
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xdc>
    1d8e:	90 c0       	rjmp	.+288    	; 0x1eb0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    1d90:	38 e0       	ldi	r19, 0x08	; 8
    1d92:	b3 0e       	add	r11, r19
    1d94:	8d c0       	rjmp	.+282    	; 0x1eb0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1fc>
    1d96:	81 11       	cpse	r24, r1
    1d98:	02 c0       	rjmp	.+4      	; 0x1d9e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xea>
    1d9a:	94 e0       	ldi	r25, 0x04	; 4
    1d9c:	01 c0       	rjmp	.+2      	; 0x1da0 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xec>
    1d9e:	93 e0       	ldi	r25, 0x03	; 3
    1da0:	29 17       	cp	r18, r25
    1da2:	08 f4       	brcc	.+2      	; 0x1da6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xf2>
    1da4:	92 2f       	mov	r25, r18
    1da6:	ed 2d       	mov	r30, r13
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	31 96       	adiw	r30, 0x01	; 1
    1dac:	e6 0d       	add	r30, r6
    1dae:	f7 1d       	adc	r31, r7
    1db0:	23 2f       	mov	r18, r19
    1db2:	41 91       	ld	r20, Z+
    1db4:	a1 e0       	ldi	r26, 0x01	; 1
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	ac 0f       	add	r26, r28
    1dba:	bd 1f       	adc	r27, r29
    1dbc:	a2 0f       	add	r26, r18
    1dbe:	b1 1d       	adc	r27, r1
    1dc0:	4c 93       	st	X, r20
    1dc2:	2f 5f       	subi	r18, 0xFF	; 255
    1dc4:	42 2f       	mov	r20, r18
    1dc6:	43 1b       	sub	r20, r19
    1dc8:	49 17       	cp	r20, r25
    1dca:	98 f3       	brcs	.-26     	; 0x1db2 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xfe>
    1dcc:	de cf       	rjmp	.-68     	; 0x1d8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0xd6>
    1dce:	81 11       	cpse	r24, r1
    1dd0:	dc c0       	rjmp	.+440    	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1dd2:	9f e1       	ldi	r25, 0x1F	; 31
    1dd4:	9b 15       	cp	r25, r11
    1dd6:	0c f4       	brge	.+2      	; 0x1dda <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x126>
    1dd8:	94 c0       	rjmp	.+296    	; 0x1f02 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24e>
    1dda:	80 e2       	ldi	r24, 0x20	; 32
    1ddc:	b8 2e       	mov	r11, r24
    1dde:	90 e7       	ldi	r25, 0x70	; 112
    1de0:	9a 83       	std	Y+2, r25	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	8c 81       	ldd	r24, Y+4	; 0x04
    1de6:	89 27       	eor	r24, r25
    1de8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dea:	89 27       	eor	r24, r25
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	89 27       	eor	r24, r25
    1df0:	8f 83       	std	Y+7, r24	; 0x07
    1df2:	9e 01       	movw	r18, r28
    1df4:	28 5f       	subi	r18, 0xF8	; 248
    1df6:	3f 4f       	sbci	r19, 0xFF	; 255
    1df8:	47 e0       	ldi	r20, 0x07	; 7
    1dfa:	be 01       	movw	r22, r28
    1dfc:	6f 5f       	subi	r22, 0xFF	; 255
    1dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    1e00:	c4 01       	movw	r24, r8
    1e02:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1e06:	81 11       	cpse	r24, r1
    1e08:	c0 c0       	rjmp	.+384    	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1e0a:	1b 86       	std	Y+11, r1	; 0x0b
    1e0c:	e3 e0       	ldi	r30, 0x03	; 3
    1e0e:	ea 87       	std	Y+10, r30	; 0x0a
    1e10:	ce 01       	movw	r24, r28
    1e12:	07 96       	adiw	r24, 0x07	; 7
    1e14:	2c 01       	movw	r4, r24
    1e16:	99 e0       	ldi	r25, 0x09	; 9
    1e18:	9c 87       	std	Y+12, r25	; 0x0c
    1e1a:	cb 84       	ldd	r12, Y+11	; 0x0b
    1e1c:	4c 2d       	mov	r20, r12
    1e1e:	42 95       	swap	r20
    1e20:	40 7f       	andi	r20, 0xF0	; 240
    1e22:	4c 0d       	add	r20, r12
    1e24:	6a e1       	ldi	r22, 0x1A	; 26
    1e26:	c4 01       	movw	r24, r8
    1e28:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    1e2c:	a1 2c       	mov	r10, r1
    1e2e:	ce 01       	movw	r24, r28
    1e30:	0b 96       	adiw	r24, 0x0b	; 11
    1e32:	7c 01       	movw	r14, r24
    1e34:	8e 01       	movw	r16, r28
    1e36:	06 5f       	subi	r16, 0xF6	; 246
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	92 01       	movw	r18, r4
    1e3c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e3e:	be 01       	movw	r22, r28
    1e40:	6f 5f       	subi	r22, 0xFF	; 255
    1e42:	7f 4f       	sbci	r23, 0xFF	; 255
    1e44:	c4 01       	movw	r24, r8
    1e46:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    1e4a:	82 30       	cpi	r24, 0x02	; 2
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x19c>
    1e4e:	bf cf       	rjmp	.-130    	; 0x1dce <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x11a>
    1e50:	6c e1       	ldi	r22, 0x1C	; 28
    1e52:	c4 01       	movw	r24, r8
    1e54:	0e 94 22 0c 	call	0x1844	; 0x1844 <_ZN7MFRC52216PCD_ReadRegisterENS_12PCD_RegisterE>
    1e58:	85 fd       	sbrc	r24, 5
    1e5a:	4f c0       	rjmp	.+158    	; 0x1efa <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x246>
    1e5c:	8f 71       	andi	r24, 0x1F	; 31
    1e5e:	09 f4       	brne	.+2      	; 0x1e62 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ae>
    1e60:	80 e2       	ldi	r24, 0x20	; 32
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	2b 2d       	mov	r18, r11
    1e66:	0b 2c       	mov	r0, r11
    1e68:	00 0c       	add	r0, r0
    1e6a:	33 0b       	sbc	r19, r19
    1e6c:	28 17       	cp	r18, r24
    1e6e:	39 07       	cpc	r19, r25
    1e70:	0c f0       	brlt	.+2      	; 0x1e74 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1c0>
    1e72:	45 c0       	rjmp	.+138    	; 0x1efe <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x24a>
    1e74:	01 97       	sbiw	r24, 0x01	; 1
    1e76:	9c 01       	movw	r18, r24
    1e78:	27 70       	andi	r18, 0x07	; 7
    1e7a:	33 27       	eor	r19, r19
    1e7c:	33 e0       	ldi	r19, 0x03	; 3
    1e7e:	95 95       	asr	r25
    1e80:	87 95       	ror	r24
    1e82:	3a 95       	dec	r19
    1e84:	e1 f7       	brne	.-8      	; 0x1e7e <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1ca>
    1e86:	8f 5f       	subi	r24, 0xFF	; 255
    1e88:	91 e0       	ldi	r25, 0x01	; 1
    1e8a:	21 11       	cpse	r18, r1
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1dc>
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	89 0f       	add	r24, r25
    1e92:	e1 e0       	ldi	r30, 0x01	; 1
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	ec 0f       	add	r30, r28
    1e98:	fd 1f       	adc	r31, r29
    1e9a:	e8 0f       	add	r30, r24
    1e9c:	f1 1d       	adc	r31, r1
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	01 c0       	rjmp	.+2      	; 0x1ea6 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f2>
    1ea4:	88 0f       	add	r24, r24
    1ea6:	2a 95       	dec	r18
    1ea8:	ea f7       	brpl	.-6      	; 0x1ea4 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x1f0>
    1eaa:	90 81       	ld	r25, Z
    1eac:	89 2b       	or	r24, r25
    1eae:	80 83       	st	Z, r24
    1eb0:	8f e1       	ldi	r24, 0x1F	; 31
    1eb2:	8b 15       	cp	r24, r11
    1eb4:	0c f4       	brge	.+2      	; 0x1eb8 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x204>
    1eb6:	93 cf       	rjmp	.-218    	; 0x1dde <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x12a>
    1eb8:	9b 2d       	mov	r25, r11
    1eba:	97 70       	andi	r25, 0x07	; 7
    1ebc:	9b 87       	std	Y+11, r25	; 0x0b
    1ebe:	8b 2d       	mov	r24, r11
    1ec0:	85 95       	asr	r24
    1ec2:	85 95       	asr	r24
    1ec4:	85 95       	asr	r24
    1ec6:	8e 5f       	subi	r24, 0xFE	; 254
    1ec8:	29 2f       	mov	r18, r25
    1eca:	e0 e1       	ldi	r30, 0x10	; 16
    1ecc:	8e 9f       	mul	r24, r30
    1ece:	20 0d       	add	r18, r0
    1ed0:	11 24       	eor	r1, r1
    1ed2:	2a 83       	std	Y+2, r18	; 0x02
    1ed4:	21 e0       	ldi	r18, 0x01	; 1
    1ed6:	91 11       	cpse	r25, r1
    1ed8:	01 c0       	rjmp	.+2      	; 0x1edc <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x228>
    1eda:	20 e0       	ldi	r18, 0x00	; 0
    1edc:	28 0f       	add	r18, r24
    1ede:	2c 87       	std	Y+12, r18	; 0x0c
    1ee0:	44 24       	eor	r4, r4
    1ee2:	43 94       	inc	r4
    1ee4:	51 2c       	mov	r5, r1
    1ee6:	4c 0e       	add	r4, r28
    1ee8:	5d 1e       	adc	r5, r29
    1eea:	48 0e       	add	r4, r24
    1eec:	51 1c       	adc	r5, r1
    1eee:	f9 e0       	ldi	r31, 0x09	; 9
    1ef0:	f8 1b       	sub	r31, r24
    1ef2:	fa 87       	std	Y+10, r31	; 0x0a
    1ef4:	92 cf       	rjmp	.-220    	; 0x1e1a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x166>
    1ef6:	86 e0       	ldi	r24, 0x06	; 6
    1ef8:	48 c0       	rjmp	.+144    	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1efa:	82 e0       	ldi	r24, 0x02	; 2
    1efc:	46 c0       	rjmp	.+140    	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1efe:	85 e0       	ldi	r24, 0x05	; 5
    1f00:	44 c0       	rjmp	.+136    	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	88 38       	cpi	r24, 0x88	; 136
    1f06:	f1 f1       	breq	.+124    	; 0x1f84 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d0>
    1f08:	82 e0       	ldi	r24, 0x02	; 2
    1f0a:	94 e0       	ldi	r25, 0x04	; 4
    1f0c:	ed 2d       	mov	r30, r13
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	31 96       	adiw	r30, 0x01	; 1
    1f12:	e6 0d       	add	r30, r6
    1f14:	f7 1d       	adc	r31, r7
    1f16:	98 0f       	add	r25, r24
    1f18:	a1 e0       	ldi	r26, 0x01	; 1
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	ac 0f       	add	r26, r28
    1f1e:	bd 1f       	adc	r27, r29
    1f20:	a8 0f       	add	r26, r24
    1f22:	b1 1d       	adc	r27, r1
    1f24:	2c 91       	ld	r18, X
    1f26:	21 93       	st	Z+, r18
    1f28:	8f 5f       	subi	r24, 0xFF	; 255
    1f2a:	98 13       	cpse	r25, r24
    1f2c:	f5 cf       	rjmp	.-22     	; 0x1f18 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x264>
    1f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f30:	83 30       	cpi	r24, 0x03	; 3
    1f32:	21 f5       	brne	.+72     	; 0x1f7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c8>
    1f34:	8b 85       	ldd	r24, Y+11	; 0x0b
    1f36:	81 11       	cpse	r24, r1
    1f38:	21 c0       	rjmp	.+66     	; 0x1f7c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2c8>
    1f3a:	9e 01       	movw	r18, r28
    1f3c:	2d 5f       	subi	r18, 0xFD	; 253
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	b2 01       	movw	r22, r4
    1f44:	c4 01       	movw	r24, r8
    1f46:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    1f4a:	81 11       	cpse	r24, r1
    1f4c:	1e c0       	rjmp	.+60     	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1f4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f50:	f2 01       	movw	r30, r4
    1f52:	81 81       	ldd	r24, Z+1	; 0x01
    1f54:	98 13       	cpse	r25, r24
    1f56:	14 c0       	rjmp	.+40     	; 0x1f80 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1f58:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5a:	82 81       	ldd	r24, Z+2	; 0x02
    1f5c:	98 13       	cpse	r25, r24
    1f5e:	10 c0       	rjmp	.+32     	; 0x1f80 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2cc>
    1f60:	80 81       	ld	r24, Z
    1f62:	82 ff       	sbrs	r24, 2
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2b6>
    1f66:	23 94       	inc	r2
    1f68:	cb ce       	rjmp	.-618    	; 0x1d00 <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x4c>
    1f6a:	f3 01       	movw	r30, r6
    1f6c:	83 87       	std	Z+11, r24	; 0x0b
    1f6e:	82 2d       	mov	r24, r2
    1f70:	88 0f       	add	r24, r24
    1f72:	82 0d       	add	r24, r2
    1f74:	8f 5f       	subi	r24, 0xFF	; 255
    1f76:	80 83       	st	Z, r24
    1f78:	80 e0       	ldi	r24, 0x00	; 0
    1f7a:	07 c0       	rjmp	.+14     	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	05 c0       	rjmp	.+10     	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1f80:	87 e0       	ldi	r24, 0x07	; 7
    1f82:	03 c0       	rjmp	.+6      	; 0x1f8a <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x2d6>
    1f84:	83 e0       	ldi	r24, 0x03	; 3
    1f86:	93 e0       	ldi	r25, 0x03	; 3
    1f88:	c1 cf       	rjmp	.-126    	; 0x1f0c <_ZN7MFRC52211PICC_SelectEPNS_3UidEh+0x258>
    1f8a:	2c 96       	adiw	r28, 0x0c	; 12
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	bf 90       	pop	r11
    1fa8:	af 90       	pop	r10
    1faa:	9f 90       	pop	r9
    1fac:	8f 90       	pop	r8
    1fae:	7f 90       	pop	r7
    1fb0:	6f 90       	pop	r6
    1fb2:	5f 90       	pop	r5
    1fb4:	4f 90       	pop	r4
    1fb6:	3f 90       	pop	r3
    1fb8:	2f 90       	pop	r2
    1fba:	08 95       	ret

00001fbc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>:
    1fbc:	4f 92       	push	r4
    1fbe:	5f 92       	push	r5
    1fc0:	6f 92       	push	r6
    1fc2:	7f 92       	push	r7
    1fc4:	8f 92       	push	r8
    1fc6:	9f 92       	push	r9
    1fc8:	af 92       	push	r10
    1fca:	cf 92       	push	r12
    1fcc:	ef 92       	push	r14
    1fce:	ff 92       	push	r15
    1fd0:	0f 93       	push	r16
    1fd2:	1f 93       	push	r17
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x1e>
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
    1fde:	6a 83       	std	Y+2, r22	; 0x02
    1fe0:	41 15       	cp	r20, r1
    1fe2:	51 05       	cpc	r21, r1
    1fe4:	39 f1       	breq	.+78     	; 0x2034 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    1fe6:	f9 01       	movw	r30, r18
    1fe8:	60 81       	ld	r22, Z
    1fea:	62 30       	cpi	r22, 0x02	; 2
    1fec:	18 f1       	brcs	.+70     	; 0x2034 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x78>
    1fee:	49 01       	movw	r8, r18
    1ff0:	2a 01       	movw	r4, r20
    1ff2:	3c 01       	movw	r6, r24
    1ff4:	40 e8       	ldi	r20, 0x80	; 128
    1ff6:	6c e1       	ldi	r22, 0x1C	; 28
    1ff8:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>
    1ffc:	87 e0       	ldi	r24, 0x07	; 7
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	a1 2c       	mov	r10, r1
    2002:	c1 2c       	mov	r12, r1
    2004:	ce 01       	movw	r24, r28
    2006:	01 96       	adiw	r24, 0x01	; 1
    2008:	7c 01       	movw	r14, r24
    200a:	84 01       	movw	r16, r8
    200c:	92 01       	movw	r18, r4
    200e:	41 e0       	ldi	r20, 0x01	; 1
    2010:	be 01       	movw	r22, r28
    2012:	6e 5f       	subi	r22, 0xFE	; 254
    2014:	7f 4f       	sbci	r23, 0xFF	; 255
    2016:	c3 01       	movw	r24, r6
    2018:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    201c:	81 11       	cpse	r24, r1
    201e:	0d c0       	rjmp	.+26     	; 0x203a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2020:	f4 01       	movw	r30, r8
    2022:	80 81       	ld	r24, Z
    2024:	82 30       	cpi	r24, 0x02	; 2
    2026:	41 f4       	brne	.+16     	; 0x2038 <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7c>
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	99 81       	ldd	r25, Y+1	; 0x01
    202c:	91 11       	cpse	r25, r1
    202e:	05 c0       	rjmp	.+10     	; 0x203a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	03 c0       	rjmp	.+6      	; 0x203a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2034:	84 e0       	ldi	r24, 0x04	; 4
    2036:	01 c0       	rjmp	.+2      	; 0x203a <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_+0x7e>
    2038:	81 e0       	ldi	r24, 0x01	; 1
    203a:	0f 90       	pop	r0
    203c:	0f 90       	pop	r0
    203e:	df 91       	pop	r29
    2040:	cf 91       	pop	r28
    2042:	1f 91       	pop	r17
    2044:	0f 91       	pop	r16
    2046:	ff 90       	pop	r15
    2048:	ef 90       	pop	r14
    204a:	cf 90       	pop	r12
    204c:	af 90       	pop	r10
    204e:	9f 90       	pop	r9
    2050:	8f 90       	pop	r8
    2052:	7f 90       	pop	r7
    2054:	6f 90       	pop	r6
    2056:	5f 90       	pop	r5
    2058:	4f 90       	pop	r4
    205a:	08 95       	ret

0000205c <_ZN7MFRC52213PICC_RequestAEPhS0_>:
    205c:	9a 01       	movw	r18, r20
    205e:	ab 01       	movw	r20, r22
    2060:	66 e2       	ldi	r22, 0x26	; 38
    2062:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <_ZN7MFRC52217PICC_REQA_or_WUPAEhPhS0_>

00002066 <_ZN7MFRC52221PICC_IsNewCardPresentEv>:
    2066:	0f 93       	push	r16
    2068:	1f 93       	push	r17
    206a:	cf 93       	push	r28
    206c:	df 93       	push	r29
    206e:	00 d0       	rcall	.+0      	; 0x2070 <_ZN7MFRC52221PICC_IsNewCardPresentEv+0xa>
    2070:	1f 92       	push	r1
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
    2076:	8c 01       	movw	r16, r24
    2078:	82 e0       	ldi	r24, 0x02	; 2
    207a:	8b 83       	std	Y+3, r24	; 0x03
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	64 e2       	ldi	r22, 0x24	; 36
    2080:	c8 01       	movw	r24, r16
    2082:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2086:	40 e0       	ldi	r20, 0x00	; 0
    2088:	66 e2       	ldi	r22, 0x26	; 38
    208a:	c8 01       	movw	r24, r16
    208c:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    2090:	46 e2       	ldi	r20, 0x26	; 38
    2092:	68 e4       	ldi	r22, 0x48	; 72
    2094:	c8 01       	movw	r24, r16
    2096:	0e 94 cf 0b 	call	0x179e	; 0x179e <_ZN7MFRC52217PCD_WriteRegisterENS_12PCD_RegisterEh>
    209a:	ae 01       	movw	r20, r28
    209c:	4d 5f       	subi	r20, 0xFD	; 253
    209e:	5f 4f       	sbci	r21, 0xFF	; 255
    20a0:	be 01       	movw	r22, r28
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	7f 4f       	sbci	r23, 0xFF	; 255
    20a6:	c8 01       	movw	r24, r16
    20a8:	0e 94 2e 10 	call	0x205c	; 0x205c <_ZN7MFRC52213PICC_RequestAEPhS0_>
    20ac:	98 2f       	mov	r25, r24
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	99 23       	and	r25, r25
    20b2:	19 f0       	breq	.+6      	; 0x20ba <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    20b4:	92 30       	cpi	r25, 0x02	; 2
    20b6:	09 f0       	breq	.+2      	; 0x20ba <_ZN7MFRC52221PICC_IsNewCardPresentEv+0x54>
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	0f 90       	pop	r0
    20bc:	0f 90       	pop	r0
    20be:	0f 90       	pop	r0
    20c0:	df 91       	pop	r29
    20c2:	cf 91       	pop	r28
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <_ZN7MFRC52210PICC_HaltAEv>:
    20ca:	8f 92       	push	r8
    20cc:	9f 92       	push	r9
    20ce:	af 92       	push	r10
    20d0:	cf 92       	push	r12
    20d2:	ef 92       	push	r14
    20d4:	ff 92       	push	r15
    20d6:	0f 93       	push	r16
    20d8:	1f 93       	push	r17
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <_ZN7MFRC52210PICC_HaltAEv+0x16>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <_ZN7MFRC52210PICC_HaltAEv+0x18>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	4c 01       	movw	r8, r24
    20e8:	80 e5       	ldi	r24, 0x50	; 80
    20ea:	89 83       	std	Y+1, r24	; 0x01
    20ec:	1a 82       	std	Y+2, r1	; 0x02
    20ee:	9e 01       	movw	r18, r28
    20f0:	2d 5f       	subi	r18, 0xFD	; 253
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	42 e0       	ldi	r20, 0x02	; 2
    20f6:	be 01       	movw	r22, r28
    20f8:	6f 5f       	subi	r22, 0xFF	; 255
    20fa:	7f 4f       	sbci	r23, 0xFF	; 255
    20fc:	c4 01       	movw	r24, r8
    20fe:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    2102:	81 11       	cpse	r24, r1
    2104:	16 c0       	rjmp	.+44     	; 0x2132 <_ZN7MFRC52210PICC_HaltAEv+0x68>
    2106:	a1 2c       	mov	r10, r1
    2108:	c1 2c       	mov	r12, r1
    210a:	e1 2c       	mov	r14, r1
    210c:	f1 2c       	mov	r15, r1
    210e:	00 e0       	ldi	r16, 0x00	; 0
    2110:	10 e0       	ldi	r17, 0x00	; 0
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	44 e0       	ldi	r20, 0x04	; 4
    2118:	be 01       	movw	r22, r28
    211a:	6f 5f       	subi	r22, 0xFF	; 255
    211c:	7f 4f       	sbci	r23, 0xFF	; 255
    211e:	c4 01       	movw	r24, r8
    2120:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2124:	83 30       	cpi	r24, 0x03	; 3
    2126:	21 f0       	breq	.+8      	; 0x2130 <_ZN7MFRC52210PICC_HaltAEv+0x66>
    2128:	81 11       	cpse	r24, r1
    212a:	03 c0       	rjmp	.+6      	; 0x2132 <_ZN7MFRC52210PICC_HaltAEv+0x68>
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	01 c0       	rjmp	.+2      	; 0x2132 <_ZN7MFRC52210PICC_HaltAEv+0x68>
    2130:	80 e0       	ldi	r24, 0x00	; 0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	0f 90       	pop	r0
    213a:	df 91       	pop	r29
    213c:	cf 91       	pop	r28
    213e:	1f 91       	pop	r17
    2140:	0f 91       	pop	r16
    2142:	ff 90       	pop	r15
    2144:	ef 90       	pop	r14
    2146:	cf 90       	pop	r12
    2148:	af 90       	pop	r10
    214a:	9f 90       	pop	r9
    214c:	8f 90       	pop	r8
    214e:	08 95       	ret

00002150 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE>:
    2150:	8f 92       	push	r8
    2152:	af 92       	push	r10
    2154:	bf 92       	push	r11
    2156:	cf 92       	push	r12
    2158:	df 92       	push	r13
    215a:	ef 92       	push	r14
    215c:	ff 92       	push	r15
    215e:	0f 93       	push	r16
    2160:	1f 93       	push	r17
    2162:	cf 93       	push	r28
    2164:	df 93       	push	r29
    2166:	cd b7       	in	r28, 0x3d	; 61
    2168:	de b7       	in	r29, 0x3e	; 62
    216a:	2c 97       	sbiw	r28, 0x0c	; 12
    216c:	0f b6       	in	r0, 0x3f	; 63
    216e:	f8 94       	cli
    2170:	de bf       	out	0x3e, r29	; 62
    2172:	0f be       	out	0x3f, r0	; 63
    2174:	cd bf       	out	0x3d, r28	; 61
    2176:	dc 01       	movw	r26, r24
    2178:	69 83       	std	Y+1, r22	; 0x01
    217a:	4a 83       	std	Y+2, r20	; 0x02
    217c:	b9 01       	movw	r22, r18
    217e:	ce 01       	movw	r24, r28
    2180:	03 96       	adiw	r24, 0x03	; 3
    2182:	9e 01       	movw	r18, r28
    2184:	27 5f       	subi	r18, 0xF7	; 247
    2186:	3f 4f       	sbci	r19, 0xFF	; 255
    2188:	fb 01       	movw	r30, r22
    218a:	41 91       	ld	r20, Z+
    218c:	bf 01       	movw	r22, r30
    218e:	fc 01       	movw	r30, r24
    2190:	41 93       	st	Z+, r20
    2192:	cf 01       	movw	r24, r30
    2194:	e2 17       	cp	r30, r18
    2196:	f3 07       	cpc	r31, r19
    2198:	b9 f7       	brne	.-18     	; 0x2188 <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE+0x38>
    219a:	f8 01       	movw	r30, r16
    219c:	90 81       	ld	r25, Z
    219e:	e9 2f       	mov	r30, r25
    21a0:	f0 e0       	ldi	r31, 0x00	; 0
    21a2:	33 97       	sbiw	r30, 0x03	; 3
    21a4:	0e 0f       	add	r16, r30
    21a6:	1f 1f       	adc	r17, r31
    21a8:	ce 01       	movw	r24, r28
    21aa:	0d 96       	adiw	r24, 0x0d	; 13
    21ac:	f8 01       	movw	r30, r16
    21ae:	41 91       	ld	r20, Z+
    21b0:	8f 01       	movw	r16, r30
    21b2:	f9 01       	movw	r30, r18
    21b4:	41 93       	st	Z+, r20
    21b6:	9f 01       	movw	r18, r30
    21b8:	e8 17       	cp	r30, r24
    21ba:	f9 07       	cpc	r31, r25
    21bc:	b9 f7       	brne	.-18     	; 0x21ac <_ZN7MFRC52216PCD_AuthenticateEhhPNS_10MIFARE_KeyEPNS_3UidE+0x5c>
    21be:	1f 92       	push	r1
    21c0:	81 2c       	mov	r8, r1
    21c2:	a1 2c       	mov	r10, r1
    21c4:	b1 2c       	mov	r11, r1
    21c6:	c1 2c       	mov	r12, r1
    21c8:	d1 2c       	mov	r13, r1
    21ca:	e1 2c       	mov	r14, r1
    21cc:	f1 2c       	mov	r15, r1
    21ce:	0c e0       	ldi	r16, 0x0C	; 12
    21d0:	9e 01       	movw	r18, r28
    21d2:	2f 5f       	subi	r18, 0xFF	; 255
    21d4:	3f 4f       	sbci	r19, 0xFF	; 255
    21d6:	40 e1       	ldi	r20, 0x10	; 16
    21d8:	6e e0       	ldi	r22, 0x0E	; 14
    21da:	cd 01       	movw	r24, r26
    21dc:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <_ZN7MFRC52223PCD_CommunicateWithPICCEhhPhhS0_S0_S0_hb>
    21e0:	0f 90       	pop	r0
    21e2:	2c 96       	adiw	r28, 0x0c	; 12
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	f8 94       	cli
    21e8:	de bf       	out	0x3e, r29	; 62
    21ea:	0f be       	out	0x3f, r0	; 63
    21ec:	cd bf       	out	0x3d, r28	; 61
    21ee:	df 91       	pop	r29
    21f0:	cf 91       	pop	r28
    21f2:	1f 91       	pop	r17
    21f4:	0f 91       	pop	r16
    21f6:	ff 90       	pop	r15
    21f8:	ef 90       	pop	r14
    21fa:	df 90       	pop	r13
    21fc:	cf 90       	pop	r12
    21fe:	bf 90       	pop	r11
    2200:	af 90       	pop	r10
    2202:	8f 90       	pop	r8
    2204:	08 95       	ret

00002206 <_ZN7MFRC52215PCD_StopCrypto1Ev>:
    2206:	48 e0       	ldi	r20, 0x08	; 8
    2208:	60 e1       	ldi	r22, 0x10	; 16
    220a:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <_ZN7MFRC52224PCD_ClearRegisterBitMaskENS_12PCD_RegisterEh>

0000220e <_ZN7MFRC52211MIFARE_ReadEhPhS0_>:
    220e:	8f 92       	push	r8
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	cf 92       	push	r12
    2216:	ef 92       	push	r14
    2218:	ff 92       	push	r15
    221a:	0f 93       	push	r16
    221c:	1f 93       	push	r17
    221e:	cf 93       	push	r28
    2220:	df 93       	push	r29
    2222:	41 15       	cp	r20, r1
    2224:	51 05       	cpc	r21, r1
    2226:	01 f1       	breq	.+64     	; 0x2268 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x5a>
    2228:	f9 01       	movw	r30, r18
    222a:	70 81       	ld	r23, Z
    222c:	72 31       	cpi	r23, 0x12	; 18
    222e:	e0 f0       	brcs	.+56     	; 0x2268 <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x5a>
    2230:	89 01       	movw	r16, r18
    2232:	ea 01       	movw	r28, r20
    2234:	4c 01       	movw	r8, r24
    2236:	80 e3       	ldi	r24, 0x30	; 48
    2238:	88 83       	st	Y, r24
    223a:	69 83       	std	Y+1, r22	; 0x01
    223c:	9a 01       	movw	r18, r20
    223e:	2e 5f       	subi	r18, 0xFE	; 254
    2240:	3f 4f       	sbci	r19, 0xFF	; 255
    2242:	42 e0       	ldi	r20, 0x02	; 2
    2244:	be 01       	movw	r22, r28
    2246:	c4 01       	movw	r24, r8
    2248:	0e 94 6f 0c 	call	0x18de	; 0x18de <_ZN7MFRC52216PCD_CalculateCRCEPhhS0_>
    224c:	81 11       	cpse	r24, r1
    224e:	0d c0       	rjmp	.+26     	; 0x226a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x5c>
    2250:	aa 24       	eor	r10, r10
    2252:	a3 94       	inc	r10
    2254:	c1 2c       	mov	r12, r1
    2256:	e1 2c       	mov	r14, r1
    2258:	f1 2c       	mov	r15, r1
    225a:	9e 01       	movw	r18, r28
    225c:	44 e0       	ldi	r20, 0x04	; 4
    225e:	be 01       	movw	r22, r28
    2260:	c4 01       	movw	r24, r8
    2262:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <_ZN7MFRC52218PCD_TransceiveDataEPhhS0_S0_S0_hb>
    2266:	01 c0       	rjmp	.+2      	; 0x226a <_ZN7MFRC52211MIFARE_ReadEhPhS0_+0x5c>
    2268:	84 e0       	ldi	r24, 0x04	; 4
    226a:	df 91       	pop	r29
    226c:	cf 91       	pop	r28
    226e:	1f 91       	pop	r17
    2270:	0f 91       	pop	r16
    2272:	ff 90       	pop	r15
    2274:	ef 90       	pop	r14
    2276:	cf 90       	pop	r12
    2278:	af 90       	pop	r10
    227a:	9f 90       	pop	r9
    227c:	8f 90       	pop	r8
    227e:	08 95       	ret

00002280 <_ZN7MFRC52217GetStatusCodeNameENS_10StatusCodeE>:
 * 
 * @return const __FlashStringHelper *
 */
const __FlashStringHelper *MFRC522::GetStatusCodeName(MFRC522::StatusCode code	///< One of the StatusCode enums.
										) {
	return MFRC522Debug::GetStatusCodeName(code);
    2280:	0c 94 42 11 	jmp	0x2284	; 0x2284 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE>

00002284 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE>:
 * 
 * @return const __FlashStringHelper *
 */
const __FlashStringHelper *MFRC522Debug::GetStatusCodeName(MFRC522::StatusCode code	///< One of the StatusCode enums.
) {
	switch (code) {
    2284:	84 30       	cpi	r24, 0x04	; 4
    2286:	d9 f0       	breq	.+54     	; 0x22be <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x3a>
    2288:	50 f4       	brcc	.+20     	; 0x229e <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x1a>
    228a:	81 30       	cpi	r24, 0x01	; 1
    228c:	91 f0       	breq	.+36     	; 0x22b2 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x2e>
    228e:	30 f1       	brcs	.+76     	; 0x22dc <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x58>
    2290:	82 30       	cpi	r24, 0x02	; 2
    2292:	91 f0       	breq	.+36     	; 0x22b8 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x34>
    2294:	83 30       	cpi	r24, 0x03	; 3
    2296:	f9 f4       	brne	.+62     	; 0x22d6 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x52>
		case MFRC522::STATUS_OK:				return F("Success.");
		case MFRC522::STATUS_ERROR:			return F("Error in communication.");
		case MFRC522::STATUS_COLLISION:		return F("Collission detected.");
		case MFRC522::STATUS_TIMEOUT:		return F("Timeout in communication.");
    2298:	86 eb       	ldi	r24, 0xB6	; 182
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	08 95       	ret
 * 
 * @return const __FlashStringHelper *
 */
const __FlashStringHelper *MFRC522Debug::GetStatusCodeName(MFRC522::StatusCode code	///< One of the StatusCode enums.
) {
	switch (code) {
    229e:	86 30       	cpi	r24, 0x06	; 6
    22a0:	a1 f0       	breq	.+40     	; 0x22ca <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x46>
    22a2:	80 f0       	brcs	.+32     	; 0x22c4 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x40>
    22a4:	87 30       	cpi	r24, 0x07	; 7
    22a6:	a1 f0       	breq	.+40     	; 0x22d0 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x4c>
    22a8:	8f 3f       	cpi	r24, 0xFF	; 255
    22aa:	a9 f4       	brne	.+42     	; 0x22d6 <_ZN12MFRC522Debug17GetStatusCodeNameEN7MFRC52210StatusCodeE+0x52>
		case MFRC522::STATUS_TIMEOUT:		return F("Timeout in communication.");
		case MFRC522::STATUS_NO_ROOM:		return F("A buffer is not big enough.");
		case MFRC522::STATUS_INTERNAL_ERROR:	return F("Internal error in the code. Should not happen.");
		case MFRC522::STATUS_INVALID:		return F("Invalid argument.");
		case MFRC522::STATUS_CRC_WRONG:		return F("The CRC_A does not match.");
		case MFRC522::STATUS_MIFARE_NACK:	return F("A MIFARE PICC responded with NAK.");
    22ac:	8d e1       	ldi	r24, 0x1D	; 29
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	08 95       	ret
 */
const __FlashStringHelper *MFRC522Debug::GetStatusCodeName(MFRC522::StatusCode code	///< One of the StatusCode enums.
) {
	switch (code) {
		case MFRC522::STATUS_OK:				return F("Success.");
		case MFRC522::STATUS_ERROR:			return F("Error in communication.");
    22b2:	85 ee       	ldi	r24, 0xE5	; 229
    22b4:	91 e0       	ldi	r25, 0x01	; 1
    22b6:	08 95       	ret
		case MFRC522::STATUS_COLLISION:		return F("Collission detected.");
    22b8:	80 ed       	ldi	r24, 0xD0	; 208
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	08 95       	ret
		case MFRC522::STATUS_TIMEOUT:		return F("Timeout in communication.");
		case MFRC522::STATUS_NO_ROOM:		return F("A buffer is not big enough.");
    22be:	8a e9       	ldi	r24, 0x9A	; 154
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	08 95       	ret
		case MFRC522::STATUS_INTERNAL_ERROR:	return F("Internal error in the code. Should not happen.");
    22c4:	8b e6       	ldi	r24, 0x6B	; 107
    22c6:	91 e0       	ldi	r25, 0x01	; 1
    22c8:	08 95       	ret
		case MFRC522::STATUS_INVALID:		return F("Invalid argument.");
    22ca:	89 e5       	ldi	r24, 0x59	; 89
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	08 95       	ret
		case MFRC522::STATUS_CRC_WRONG:		return F("The CRC_A does not match.");
    22d0:	8f e3       	ldi	r24, 0x3F	; 63
    22d2:	91 e0       	ldi	r25, 0x01	; 1
    22d4:	08 95       	ret
		case MFRC522::STATUS_MIFARE_NACK:	return F("A MIFARE PICC responded with NAK.");
		default:					return F("Unknown error");
    22d6:	8f e0       	ldi	r24, 0x0F	; 15
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	08 95       	ret
 * @return const __FlashStringHelper *
 */
const __FlashStringHelper *MFRC522Debug::GetStatusCodeName(MFRC522::StatusCode code	///< One of the StatusCode enums.
) {
	switch (code) {
		case MFRC522::STATUS_OK:				return F("Success.");
    22dc:	8d ef       	ldi	r24, 0xFD	; 253
    22de:	91 e0       	ldi	r25, 0x01	; 1
		case MFRC522::STATUS_INVALID:		return F("Invalid argument.");
		case MFRC522::STATUS_CRC_WRONG:		return F("The CRC_A does not match.");
		case MFRC522::STATUS_MIFARE_NACK:	return F("A MIFARE PICC responded with NAK.");
		default:					return F("Unknown error");
	}
} // End GetStatusCodeName()
    22e0:	08 95       	ret

000022e2 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    22e2:	cf 93       	push	r28
  uint8_t sreg = SREG;
    22e4:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    22e6:	f8 94       	cli
  if (!initialized) {
    22e8:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <_ZN8SPIClass11initializedE>
    22ec:	81 11       	cpse	r24, r1
    22ee:	27 c0       	rjmp	.+78     	; 0x233e <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    22f0:	e5 ed       	ldi	r30, 0xD5	; 213
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    22f6:	e1 ec       	ldi	r30, 0xC1	; 193
    22f8:	f0 e0       	ldi	r31, 0x00	; 0
    22fa:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    22fc:	e8 2f       	mov	r30, r24
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	ed 50       	subi	r30, 0x0D	; 13
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	a5 91       	lpm	r26, Z+
    230a:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    230c:	ec 91       	ld	r30, X
    230e:	e9 23       	and	r30, r25
    2310:	21 f4       	brne	.+8      	; 0x231a <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2312:	61 e0       	ldi	r22, 0x01	; 1
    2314:	8a e0       	ldi	r24, 0x0A	; 10
    2316:	0e 94 4f 07 	call	0xe9e	; 0xe9e <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    231a:	61 e0       	ldi	r22, 0x01	; 1
    231c:	8a e0       	ldi	r24, 0x0A	; 10
    231e:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2322:	8c b5       	in	r24, 0x2c	; 44
    2324:	80 61       	ori	r24, 0x10	; 16
    2326:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2328:	8c b5       	in	r24, 0x2c	; 44
    232a:	80 64       	ori	r24, 0x40	; 64
    232c:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    232e:	61 e0       	ldi	r22, 0x01	; 1
    2330:	8d e0       	ldi	r24, 0x0D	; 13
    2332:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
    pinMode(MOSI, OUTPUT);
    2336:	61 e0       	ldi	r22, 0x01	; 1
    2338:	8b e0       	ldi	r24, 0x0B	; 11
    233a:	0e 94 13 07 	call	0xe26	; 0xe26 <pinMode>
  }
  initialized++; // reference count
    233e:	80 91 8f 02 	lds	r24, 0x028F	; 0x80028f <_ZN8SPIClass11initializedE>
    2342:	8f 5f       	subi	r24, 0xFF	; 255
    2344:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2348:	cf bf       	out	0x3f, r28	; 63
}
    234a:	cf 91       	pop	r28
    234c:	08 95       	ret

0000234e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    234e:	08 95       	ret

00002350 <__udivmodsi4>:
    2350:	a1 e2       	ldi	r26, 0x21	; 33
    2352:	1a 2e       	mov	r1, r26
    2354:	aa 1b       	sub	r26, r26
    2356:	bb 1b       	sub	r27, r27
    2358:	fd 01       	movw	r30, r26
    235a:	0d c0       	rjmp	.+26     	; 0x2376 <__udivmodsi4_ep>

0000235c <__udivmodsi4_loop>:
    235c:	aa 1f       	adc	r26, r26
    235e:	bb 1f       	adc	r27, r27
    2360:	ee 1f       	adc	r30, r30
    2362:	ff 1f       	adc	r31, r31
    2364:	a2 17       	cp	r26, r18
    2366:	b3 07       	cpc	r27, r19
    2368:	e4 07       	cpc	r30, r20
    236a:	f5 07       	cpc	r31, r21
    236c:	20 f0       	brcs	.+8      	; 0x2376 <__udivmodsi4_ep>
    236e:	a2 1b       	sub	r26, r18
    2370:	b3 0b       	sbc	r27, r19
    2372:	e4 0b       	sbc	r30, r20
    2374:	f5 0b       	sbc	r31, r21

00002376 <__udivmodsi4_ep>:
    2376:	66 1f       	adc	r22, r22
    2378:	77 1f       	adc	r23, r23
    237a:	88 1f       	adc	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	1a 94       	dec	r1
    2380:	69 f7       	brne	.-38     	; 0x235c <__udivmodsi4_loop>
    2382:	60 95       	com	r22
    2384:	70 95       	com	r23
    2386:	80 95       	com	r24
    2388:	90 95       	com	r25
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	bd 01       	movw	r22, r26
    2390:	cf 01       	movw	r24, r30
    2392:	08 95       	ret

00002394 <__tablejump2__>:
    2394:	ee 0f       	add	r30, r30
    2396:	ff 1f       	adc	r31, r31
    2398:	05 90       	lpm	r0, Z+
    239a:	f4 91       	lpm	r31, Z
    239c:	e0 2d       	mov	r30, r0
    239e:	09 94       	ijmp

000023a0 <memcpy>:
    23a0:	fb 01       	movw	r30, r22
    23a2:	dc 01       	movw	r26, r24
    23a4:	02 c0       	rjmp	.+4      	; 0x23aa <memcpy+0xa>
    23a6:	01 90       	ld	r0, Z+
    23a8:	0d 92       	st	X+, r0
    23aa:	41 50       	subi	r20, 0x01	; 1
    23ac:	50 40       	sbci	r21, 0x00	; 0
    23ae:	d8 f7       	brcc	.-10     	; 0x23a6 <memcpy+0x6>
    23b0:	08 95       	ret

000023b2 <strncpy>:
    23b2:	fb 01       	movw	r30, r22
    23b4:	dc 01       	movw	r26, r24
    23b6:	41 50       	subi	r20, 0x01	; 1
    23b8:	50 40       	sbci	r21, 0x00	; 0
    23ba:	48 f0       	brcs	.+18     	; 0x23ce <strncpy+0x1c>
    23bc:	01 90       	ld	r0, Z+
    23be:	0d 92       	st	X+, r0
    23c0:	00 20       	and	r0, r0
    23c2:	c9 f7       	brne	.-14     	; 0x23b6 <strncpy+0x4>
    23c4:	01 c0       	rjmp	.+2      	; 0x23c8 <strncpy+0x16>
    23c6:	1d 92       	st	X+, r1
    23c8:	41 50       	subi	r20, 0x01	; 1
    23ca:	50 40       	sbci	r21, 0x00	; 0
    23cc:	e0 f7       	brcc	.-8      	; 0x23c6 <strncpy+0x14>
    23ce:	08 95       	ret

000023d0 <_exit>:
    23d0:	f8 94       	cli

000023d2 <__stop_program>:
    23d2:	ff cf       	rjmp	.-2      	; 0x23d2 <__stop_program>
